{"version":3,"sources":["../visualization-frontend/src/components/NavigationBar.tsx","../visualization-frontend/src/components/Slider.tsx","../visualization-frontend/src/model/util.ts","../visualization-frontend/src/components/Graph.tsx","../visualization-frontend/src/components/NodeDetails.tsx","../visualization-frontend/src/components/NodeDetailsWrapper.tsx","../visualization-frontend/src/components/PassiveDagAside.tsx","../visualization-frontend/src/model/sat-node.ts","../visualization-frontend/src/model/unit.ts","../visualization-frontend/src/model/literal.ts","../visualization-frontend/src/model/unit-parser.ts","../visualization-frontend/src/model/traversal.ts","../visualization-frontend/src/model/substitution.ts","../visualization-frontend/src/model/dag.ts","../visualization-frontend/src/model/transformations.ts","../visualization-frontend/src/model/callViz.js","../visualization-frontend/src/model/viz-wrapper.ts","../visualization-frontend/src/components/PassiveDagModal.tsx","../visualization-frontend/src/components/Main.tsx","../visualization-frontend/src/components/GraphMenu.tsx","../visualization-frontend/src/components/NodeMenu.tsx","../visualization-frontend/src/components/Search.tsx","../visualization-frontend/src/components/NodeCard.tsx","../visualization-frontend/src/components/Aside.tsx","../visualization-frontend/src/model/clause-orientation.ts","../visualization-frontend/src/components/App.tsx","../visualization-frontend/src/model/find-node.ts","../visualization-frontend/src/components/AppWrapper.tsx","../visualization-frontend/src/components/Menu.tsx","../visualization-frontend/src/components/Router.tsx","../visualization-frontend/src/serviceWorker.js","../visualization-frontend/src/index.tsx","../visualization-frontend/src/resources/icons/all.svg"],"names":["icons","require","NavigationBar","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","id","onClick","history","back","viewBox","className","xlinkHref","concat","props","name","React","Slider","slider","_this2","_this$props","historyLength","currentTime","onCurrentTimeChange","disabled","ref","type","min","max","onChange","getSliderValue","current","parseInt","SatVisAssertionError","message","_this","call","Error","assert","condition","length","undefined","styleTemplates","Graph","state","metaPressed","markers","Set","network","networkNodes","DataSet","networkEdges","graphContainer","dragStartEvent","cachedChangeNodesEvent","boundKeydownHandler","keydownHandler","bind","assertThisInitialized","boundKeyupHandler","keyupHandler","generateNetwork","updateNetwork","selectNodes","nodeSelection","fit","window","addEventListener","removeEventListener","prevProps","dag","animateDagChanges","nodes","map","nodeId","toString","animation","incomingEvent","changedNodesEvent","visNodes","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","has","visNode","label","get","toHTMLString","push","err","return","update","Network","edges","physics","interaction","multiselect","on","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","clickEvent","clickedNodeId","wrap","_context","prev","find","onNodeSelectionChange","filter","stop","_x","dragEndEvent","isPassiveDag","deltaX","pointer","canvas","x","deltaY","y","onUpdateNodePositions","onlyUpdateStyles","visEdges","edgeId","nodePartition","styleMap","computeNodePartition","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref4","_ref3","slicedToArray","satNodeId","satNode","nodeStyle","hidden","toVisNode","getPosition","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","parents","parentId","visEdge","toVisEdge","clear","add","nodesInActiveDag","computeNodesInActiveDag","Map","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_ref7","_ref6","node","isDeleted","deletionTime","nodeIsTheoryAxiom","set","isFromPreprocessing","inferenceRule","activeTime","style","position","styleData","isMarked","labelHighlightBold","shape","color","border","markedStyle","defaultStyle","background","highlight","highlightStyle","font","text","multi","Math","round","parentNodeId","arrows","from","to","smooth","clickPosition","getNodeAt","layerX","layerY","event","setState","delete","NodeDetails","draggable","keep","toList","clause","orientation","literals","premiseLiterals","conclusionLiterals","contextLiterals","react_sortablejs_lib_default","options","group","tag","_items","_sortable","onLiteralOrientationChange","oldIndex","newIndex","literal","index","toListItem","data-id","onDoubleClick","onLiteralRepresentationChange","currentTarget","innerText","statisticsStrings","numberOfTransitiveActivatedChildren","statistics","_ref2","includes","infoToggle","title","onToggleInfo","editToggle","onToggleEdit","unit","string","onMouseEnter","onMouseLeave","NodeDetailsWrapper","NodeDetails_NodeDetails","PassiveDagAside","selectClauseButtonEnabled","onSelectButtonPressed","NodeDetailsWrapper_NodeDetailsWrapper","SatNode","newTime","deletionParents","isBoundary","isActive","Formula","formula","Clause","literalsNewEvent","literalsActiveEvent","oldPosition","newPosition","removedLiterals","splice","removedLiteral","orientationReason","join","premiseString","isSelected","conclusionString","contextString","premiseStringWithoutBoldness","conclusionStringWithoutBoldness","contextStringWithoutBoldness","estimatedLengthOfLine","ceil","line","repeat","implication","Literal","args","negated","representation","hideBracketsAssoc","nonStrictForNegatedStrictInequalities","literalInParent","negateLiteral","occursNegated","switchSides","lhs","rhs","arg","Term","isVariable","startsWith","inner","UnitParser","match","parseClause","literalStrings","split","i","parseLiteral","equalityPosition","search","substring","lhsString","rhsString","parseTerm","atomString","literalTerm","tokens","stringPos","char","tokenEnd","token","stack","pos","pop","f","DFPostOrderTraversal","todo","visited","leaves","last","currentId","currentNode","existsUnvisitedParent","ReversePostOrderTraversal","postOrder","it","hasNext","getNext","literalsMatch","literal1","literal2","allowSubstitutions","success","substitution","arg1","arg2","computeSubstitution","substitutionEq","isSubstitution","termsAreEqual","isEqual","f1","f2","substitutedVariable","ParsedLine","unitString","Dag","mergeMap","activeNodeId","_ref5","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","nonLeaves","values","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","keys","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","size","children","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","counter","transitiveChildrenIds","existsRelevantParent","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","isRelevant","alreadyGenerated","alreadyActivated","activeNodeIds","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_ref9","_ref8","nodeIds","computeActiveNodes","currentNodeId","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","parsedLines","existingDag","maximalActiveTime","emptyClauseNode","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","parentsAfterMerge","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","mergedParentsOrUndefined","toConsumableArray","parsePreprocessingUnit","parent","clauseAfterActivation","nSel","existingLiteralsActiveOrder","foundMatch","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","existingLiteral","filterNonParents","relevantIds","transitiveParentIds","remainingNodes","forEach","remainingNodesDeepCopy","copy","filterNonConsequences","boundaryNode","createBoundaryNode","mergePreprocessing","nodeIdsToRemove","postOrderTraversal","updatedParents","parentNode","parent2Id","updatedNode","nodeIdToRemove","passiveDagForSelection","selectionIds","selectionIdsSet","foundNodes","idToActiveDagParents","activeDagParents","activeDagParentsParent","activeDagParent","passiveDagNodes","relevantNodes","iterator2","runViz","_runViz","dotString","viz","Viz","Module","render","abrupt","renderString","format","then","result","catch","error","console","PLAIN_PATTERN","VizWrapper","_layoutNodesAtPosition","sourceNode","isSourceNode","_position","posSelectedX","posSelectedY","posSourceX","posSourceY","_node","_position2","layoutNodes","t0","finish","t1","t2","_x2","_layoutDag","_callee2","onlyActiveDag","layoutString","_context2","dagToDotString","sent","parseLayoutString","_x3","_x4","_layoutNodes","_callee3","_context3","nodesToDotString","_x5","Number","MAX_SAFE_INTEGER","inputStrings","preprocessingStrings","otherStrings","nodeIsInputNode","edgeStrings","nodeStrings","firstEdgeLineIndex","indexOf","parsedNodeLines","substr","slice","matchAll","parsedNodeLine","_parsedNodeLine","idString","xString","yString","parseFloat","ReactModal","setAppElement","PassiveDagModal","_getPrototypeOf2","_len","_key","passiveDag","nodeSelectionPassiveDag","_componentDidMount","generatePassiveDag","_componentDidUpdate","previousProps","lib_default","isOpen","contentLabel","onRequestClose","onDismissPassiveDag","Graph_Graph","nodeSelectionChange","updateNodePositions","PassiveDagAside_PassiveDagAside","onUpdateNodeSelection","selectButtonPressed","selection","delta","_generatePassiveDag","_this$props$dag$get$g","_this$props$dag$get$g2","posCurrentX","posCurrentY","_passiveDag$get$getPo","_passiveDag$get$getPo2","posPassiveX","posPassiveY","layoutDag","selectedId","positioningHint","Main","modal","showPassiveDag","PassiveDagModal_PassiveDagModal","Slider_Slider","GraphMenu","undoEnabled","onUndo","filterUpEnabled","onRenderParentsOnly","filterDownEnabled","onRenderChildrenOnly","passiveDagButtonEnabled","onShowPassiveDag","NodeMenu","onSelectParents","onSelectChildren","onSelectCommonConsequences","Search","searchField1","searchField2","searchField3","getDisabledListItem","placeholder","onKeyUp","searchString1","searchString2","searchString3","candidates","_i","_candidates","foundLiteral","sort","node1","node2","clause1","clause2","NodeCard","NodeMenu_NodeMenu","Search_Search","Aside","multipleVersions","GraphMenu_GraphMenu","NodeCard_NodeCard","computeParentLiteralsCase1","parentLiterals","parentLiteral","setLiteralInParent","computeParentLiteralsCase2","allowMultipleRemovals","foundRemovedLit","j","computeParentLiteralsCase3","foundRewrittenLiteral","computeParentLiterals","hasSwitchedParents","parentClause","leftNode","rightNode","leftClause","rightClause","leftWasAlreadyActivated","rightWasAlreadyActivated","leftLiterals","rightLiterals","computeClauseRepresentation","changedClauseId","changedClauses","isEqualityResolutionWithDeletion","propagateSingleParent","propagateTwoParents","_loop","l","existsUserOrientedLiteral","premiseIndexMap","conclusionIndexMap","contextIndexMap","lit1","lit2","index1","index2","App","dags","nodeIdToActivate","main","_this$state","Main_Main","updateNodeSelection","updateCurrentTime","dismissPassiveDag","changeLiteralOrientation","changeLiteralRepresentation","toggleInfo","toggleEdit","Aside_Aside","undoLastStep","renderParentsOnly","renderChildrenOnly","selectParents","selectChildren","selectCommonConsequences","runVampire","problem","vampireUserOptions","mode","selectFinalPreprocessingClauses","logging","log","json","lines","val","lineType","unitId","url","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","file","fetchedJSON","status","vampireState","jsonToParsedLines","fromParsedLines","isRefutation","orientClauses","setLiteralOptions","errorMessage","currentDag","currentDagActiveNodes","newDag","newDagActiveNodes","newNodes","layoutNodesAtPosition","selectClause","popDag","pushDag","_this$state4","newSelection","_this$state5","getChildren","childId","_this$state6","commonConsequences","idToRelevantParentIds","relevantParents","relevantParentIdsFromParent","relevantParentId","findCommonConsequences","changedNodes","switchToNextRepresentation","_this$state7","selectedNodesInNewDag","Component","AppWrapper","NavigationBar_NavigationBar","src_components_App","Menu","isChromeOrFirefox","navigator","userAgent","fileUpload","monacoDiv","monaco","Monaco","create","lineNumbers","roundedSelection","scrollBeyondLastLine","scrollBeyondLastColumn","minimap","enabled","renderLineHighlight","hideCursorInOverviewRuler","links","overviewRulerBorder","automaticLayout","lineDecorationsWidth","lineNumbersMinChars","wordWrap","setValue","getModel","onDidChangeContent","onChangeProblem","getValue","problemName","chooseFile","uploadEncoding","htmlFor","changeInputSyntax","inputSyntax","changeVampireUserOptions","checked","changeHideBracketsAssoc","changeNonStrictForNegatedStrictInequalities","changeOrientClauses","changeLogging","react_router_dom","click","_this3","target","files","reader","FileReader","onloadend","onChangeProblemName","endsWith","onChangeInputSyntax","readAsText","newValue","onChangeVampireUserOptions","onChangeHideBracketsAssoc","onChangeNonStrictForNegatedStrictInequalities","onChangeOrientClauses","onChangeLogging","AppRouter","react_router","path","exact","Menu_Menu","changeProblem","changeProblemName","appComponent","AppWrapper_AppWrapper","Boolean","location","hostname","ReactDOM","Router_AppRouter","document","getElementById","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.100a3bc6.chunk.js","sourcesContent":["import * as React from 'react';\nimport './NavigationBar.css';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  name: string\n}\n\nexport class NavigationBar extends React.Component<Props, {}> {\n\n  render() {\n    return (\n      <nav id=\"navigationBar\">\n        <button onClick={() => history.back()}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#nav-back`}/>\n          </svg>\n\t\t\t\t\t<span>Back</span>\n        </button>\n        <small>{this.props.name}</small>\n        <div className=\"hidden\"></div>\n      </nav>\n    )\n  }\n}","import * as React from 'react';\n\nimport './Slider.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  historyLength: number,\n  currentTime: number,\n  onCurrentTimeChange: (newState: number) => void,\n};\nexport default class Slider extends React.Component<Props, {}> {\n\n  private slider = React.createRef<HTMLInputElement>();\n\n  render() {\n    const {historyLength, currentTime, onCurrentTimeChange} = this.props;\n\n    return (\n      <section className=\"component-slider\">\n\n        <button disabled={currentTime <= 0} onClick={() => onCurrentTimeChange(currentTime - 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-back`}/>\n          </svg>\n        </button>\n\n        <section className=\"wrapper\">\n          <input\n            ref={this.slider}\n            type=\"range\"\n            min={0}\n            max={historyLength}\n            value={currentTime}\n            onChange={() => onCurrentTimeChange(this.getSliderValue())}\n          />\n        </section>\n\n        <button disabled={currentTime >= historyLength} onClick={() => onCurrentTimeChange(currentTime + 1)}>\n          <svg viewBox=\"0 0 24 24\" className=\"icon\">\n            <use xlinkHref={`${icons}#history-forward`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  getSliderValue(): number {\n    return this.slider.current ? parseInt(this.slider.current.value, 10) : 0;\n  }\n\n}\n","class SatVisAssertionError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = \"SatVisAssertionError\";\n    }\n  }\n\nexport function assert(condition, message=\"\") {\n    if (!condition)\n        throw new SatVisAssertionError('Assertion failed: ' + (message || ''));\n};","import * as React from 'react';\nimport {DataSet, Network, IdType, Node, Edge} from 'vis'\n\nimport './Graph.css'\nimport { assert } from '../model/util';\n\nimport { Dag } from '../model/dag';\nimport SatNode from '../model/sat-node';\n\nconst styleTemplates = require('../resources/styleTemplates');\n\ntype Props = {\n  dag: Dag,\n  nodeSelection: number[],\n  changedNodesEvent?: Set<number>,\n  currentTime: number,\n  animateDagChanges: boolean,\n  onNodeSelectionChange: (selection: number[]) => void,\n  onUpdateNodePositions: (nodeIds: Array<number>, delta: [number, number]) => void\n};\n\ntype State = {\n  metaPressed: boolean,\n}\n\nexport default class Graph extends React.Component<Props, {}> {\n\n  state: State = {\n    metaPressed: false,\n  }\n\n  markers = new Set<number>();\n  network: Network | null = null;\n  networkNodes = new DataSet<Node>([]);\n  networkEdges = new DataSet<Edge>([]);\n  graphContainer = React.createRef<HTMLDivElement>();\n  dragStartEvent: any = null;\n  cachedChangeNodesEvent?: Set<number> = undefined;\n\n  boundKeydownHandler = this.keydownHandler.bind(this);\n  boundKeyupHandler =  this.keyupHandler.bind(this);\n\n  componentDidMount() {\n    this.generateNetwork();\n    this.updateNetwork(false);\n    this.network!.selectNodes(this.props.nodeSelection);\n    this.network!.fit();\n\n    window.addEventListener(\"keydown\", this.boundKeydownHandler, false);\n    window.addEventListener(\"keyup\", this.boundKeyupHandler, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.boundKeydownHandler, false);\n    window.removeEventListener(\"keyup\", this.boundKeyupHandler, false);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.dag !== prevProps.dag) {\n      this.updateNetwork(false);\n      this.network!.selectNodes(this.props.nodeSelection);\n      if (this.props.animateDagChanges) {\n        // center the view to selected nodes\n        this.network!.fit({\n          nodes: this.props.nodeSelection.map(nodeId => nodeId.toString()), \n          animation: true\n        });\n      } else {\n        // set the view so that the whole graph is visible\n        this.network!.fit();\n      }\n    } else {\n      if (this.props.nodeSelection !== prevProps.nodeSelection) {\n        this.network!.selectNodes(this.props.nodeSelection);\n      }\n      if (this.props.currentTime !== prevProps.currentTime) {\n        this.updateNetwork(true);\n      }\n      const incomingEvent = this.props.changedNodesEvent;\n      if (incomingEvent !== prevProps.changedNodesEvent) {\n        assert(incomingEvent !== undefined);\n        if (incomingEvent !== this.cachedChangeNodesEvent) {\n          this.cachedChangeNodesEvent = incomingEvent;\n\n          // update all nodes from event which occur in the dag\n          const visNodes = new Array<Node>();\n          for (const nodeId of incomingEvent!) {\n            if (this.props.dag.nodes.has(nodeId)) {\n              const visNode = {\n                id : nodeId,\n                label : this.props.dag.get(nodeId).toHTMLString(this.props.currentTime)\n              };\n              visNodes.push(visNode);\n            }\n          }\n          this.networkNodes.update(visNodes);\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"component-graph\" ref={this.graphContainer}>\n        <canvas/>\n      </section>\n    );\n  }\n\n\n  // DISPLAY NETWORK ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  generateNetwork() {\n    assert(this.graphContainer.current);\n    assert(!this.network); // should only be called once\n\n    this.network = new Network(this.graphContainer.current!, {\n      nodes: this.networkNodes,\n      edges: this.networkEdges\n    }, {\n      physics: false,\n      interaction: {\n        multiselect: false\n      },\n    });\n\n    this.network.on('click', async (clickEvent) => {\n      if (clickEvent.nodes.length > 0) {\n        assert(clickEvent.nodes.length === 1);\n        const clickedNodeId = clickEvent.nodes[0];\n        if (this.state.metaPressed) {\n          if (this.props.nodeSelection.find((nodeId: number) => nodeId === clickedNodeId) !== undefined) {\n            this.props.onNodeSelectionChange(this.props.nodeSelection.filter((nodeId: number) => nodeId !== clickedNodeId));\n          } else {\n            this.props.onNodeSelectionChange(this.props.nodeSelection.concat(clickEvent.nodes));\n          }\n        } else {\n          this.props.onNodeSelectionChange(clickEvent.nodes);\n        }\n      } else {\n        this.props.onNodeSelectionChange([]);\n      }\n    });\n\n    this.network.on('dragStart', (dragStartEvent) => {\n      assert(dragStartEvent !== undefined && dragStartEvent !== null);\n      assert(dragStartEvent.nodes !== undefined && dragStartEvent.nodes !== null);\n      this.dragStartEvent = dragStartEvent;\n      if (dragStartEvent.nodes.length > 0) {\n        this.props.onNodeSelectionChange(dragStartEvent.nodes);\n      }\n    });\n\n    this.network.on('dragEnd', (dragEndEvent) => {\n      assert(this.dragStartEvent !== undefined && this.dragStartEvent !== null);\n      assert(this.dragStartEvent.nodes !== undefined && this.dragStartEvent.nodes !== null);\n      assert(dragEndEvent !== undefined && dragEndEvent !== null);\n      assert(dragEndEvent.nodes !== undefined && dragEndEvent.nodes !== null);\n      if (dragEndEvent.nodes.length > 0 && !this.props.dag.isPassiveDag) {\n        const deltaX = dragEndEvent.pointer.canvas.x - this.dragStartEvent.pointer.canvas.x;\n        const deltaY = dragEndEvent.pointer.canvas.y - this.dragStartEvent.pointer.canvas.y;\n        this.props.onUpdateNodePositions(dragEndEvent.nodes as Array<number>, [deltaX / (-70), deltaY / (-120)]);\n      }\n    });\n  }\n\n  // updates the network displayed by Vis.js\n  // if onlyUpdateStyles is false, all nodes and edges are newly generated.\n  // if onlyUpdateStyles is true, only the attributes of the nodes and edges are updated\n  updateNetwork(onlyUpdateStyles: boolean) {\n    const {dag, currentTime} = this.props;\n\n    const visNodes = new Array<Node>();\n    const visEdges = new Array<Edge>();\n    let edgeId = 0;\n\n    // partition nodes:\n    // for standard dags, compute node partition\n    // for passive dags use style map cached in dag\n    const nodePartition = dag.isPassiveDag ? (dag.styleMap as Map<number, string>) : this.computeNodePartition(dag, currentTime);\n\n    // update network nodes\n    for (const [satNodeId, satNode] of dag.nodes) {\n      const nodeStyle = nodePartition.get(satNodeId);\n      assert(nodeStyle !== undefined, \"invar\");\n      if (nodeStyle === \"hidden\") {\n        const visNode = {id : satNodeId, hidden : true};\n        visNodes.push(visNode);\n      } else {\n        const visNode = this.toVisNode(satNode, nodeStyle, satNode.getPosition());\n        visNodes.push(visNode);\n      }\n\n      for (const parentId of satNode.parents) {\n        const visEdge = this.toVisEdge(edgeId, parentId, satNode.id, nodeStyle === \"hidden\");\n        edgeId = edgeId + 1;\n        visEdges.push(visEdge);\n      }\n    }\n\n    if(onlyUpdateStyles) {\n      // QUESTION: it seems that using a single call to update is faster than separately updating each node. is this true?\n      this.networkNodes.update(visNodes);\n      this.networkEdges.update(visEdges);\n    } else {\n      // QUESTION: it seems that using a single call to add is faster than separately adding each node. is this true?\n      this.networkNodes.clear();\n      this.networkNodes.add(visNodes);\n      this.networkEdges.clear();\n      this.networkEdges.add(visEdges);\n    }\n  }\n\n  computeNodePartition(dag: Dag, currentTime: number): Map<number, any> {\n\n    const nodesInActiveDag = dag.computeNodesInActiveDag(currentTime);\n\n    const nodePartition = new Map<number, any>();\n    for (const [nodeId, node] of dag.nodes) {\n\n      const isDeleted = (node.deletionTime !== null && node.deletionTime <= currentTime);\n\n      if (dag.nodeIsTheoryAxiom(nodeId)) {\n        nodePartition.set(nodeId, isDeleted ? \"theory-axiom-deleted\" : \"theory-axiom\");\n        continue;\n      }\n      if (node.isFromPreprocessing) {\n        if (node.inferenceRule === \"negated conjecture\") {\n          nodePartition.set(nodeId, \"conjecture\");\n        } else {\n          nodePartition.set(nodeId, isDeleted ? \"preprocessing-deleted\" : \"preprocessing\");\n        }\n        continue;\n      }\n\n      const isActivated = (node.activeTime !== null && node.activeTime <= currentTime);\n      if (isActivated) {\n        nodePartition.set(nodeId, isDeleted ? \"activated-deleted\" : \"activated\");\n        continue;\n      }\n\n      if (nodesInActiveDag.has(nodeId)) {\n        nodePartition.set(nodeId, \"deleted\");\n        continue;\n      } \n\n      nodePartition.set(nodeId, \"hidden\");\n    }\n\n    return nodePartition;\n  }\n\n  toVisNode(node: SatNode, style: string, position: [number, number]): any {\n    const styleData = styleTemplates[style];\n    const isMarked = this.markers.has(node.id);\n\n    return {\n      id : node.id,\n      label : node.toHTMLString(this.props.currentTime),\n      labelHighlightBold : false,\n      shape : \"box\",\n      color : {\n        border : isMarked ? styleData.markedStyle.border : styleData.defaultStyle.border,\n        background : isMarked ? styleData.markedStyle.background : styleData.defaultStyle.background,\n        highlight : {\n          border : styleData.highlightStyle.border,\n          background : styleData.highlightStyle.background\n        }\n      },\n      font : {\n        color : styleData.text,\n        multi : true\n      },\n      hidden : false,\n      x : Math.round(position[0] * -70),\n      y : Math.round(position[1] * -120)\n    };\n\n  }\n\n  toVisEdge(edgeId: number, parentNodeId: number, nodeId: number, hidden: boolean) {\n    return {\n      id : edgeId,\n      arrows : \"to\",\n      color : {\n        color : \"#dddddd\",\n        highlight : \"#f8cfc1\",\n      },\n      from : parentNodeId,\n      to : nodeId,\n      smooth : false,\n      hidden : hidden\n    }\n  }\n\n\n  // INTERACTION ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  findNodeAt(clickPosition: {layerX: number, layerY: number}): IdType  {\n    return this.network!.getNodeAt({\n      x: clickPosition.layerX,\n      y: clickPosition.layerY\n    });\n  }\n\n  keydownHandler(event) {\n    if (event.key === \"Meta\") {\n      this.setState({metaPressed: true});\n    }\n  }\n  keyupHandler(event) {\n    if (event.key === \"Meta\") {\n      this.setState({metaPressed: false});\n    }\n  }\n\n  // MARKERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  toggleMarker(nodeId: number) {\n    assert(this.networkNodes);\n\n    if (this.markers.has(nodeId)) {\n      this.markers.delete(nodeId);\n    } else {\n      this.markers.add(nodeId);\n    }\n    this.updateNetwork(true);\n  }\n\n}\n","import * as React from 'react';\n\nimport './NodeDetails.css';\nimport Sortable from 'react-sortablejs';\nimport {Clause} from '../model/unit';\nimport {Literal} from '../model/literal';\nimport SatNode from '../model/sat-node';\nimport {assert} from '../model/util';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  node: SatNode,\n  numberOfTransitiveActivatedChildren: number,\n  infoToggle: boolean,\n  editToggle: boolean,\n  onLiteralOrientationChange: (nodeId: number, oldPosition: [\"premise\" | \"conclusion\" | \"context\", number], newPosition: [\"premise\" | \"conclusion\" | \"context\", number]) => void,\n  onLiteralRepresentationChange: (nodeId: number, literal: Literal) => void,\n  onToggleInfo: () => void,\n  onToggleEdit: () => void\n};\n\nexport default class NodeDetails extends React.Component<Props, {}> {\n  state = {\n    draggable: false\n  };\n\n  keep=true; // hack to skip each second event generated by Sortable\n\n  render() {\n    const statisticsStrings = new Array<string>();\n    statisticsStrings.push(\"Childs: \" + this.props.numberOfTransitiveActivatedChildren.toString());\n    for (let [key, value] of this.props.node.statistics) {\n      if (!['nSel', 'inD'].includes(key)) {\n        if (key === \"a\") {\n          key = \"Age\";\n        } else if (key === \"w\") {\n          key = \"Weight\";\n        }\n        statisticsStrings.push(`${key}: ${value}`);\n      }\n    }\n\n    return (\n      <section\n        className={'component-node-details details'}\n      >\n        <article>\n          <h2>Node <strong>{this.props.node.id}</strong></h2>\n\n          <div className=\"button-bar\">\n            <button\n              className={'toggle-button' + (this.props.infoToggle ? ' toggled': '')}\n              title={ this.props.infoToggle ? 'Hide statistics': 'Show statistics' }\n              onClick={this.props.onToggleInfo}\n            >\n              <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                <use xlinkHref={`${icons}#toggle-info`}/>\n              </svg>\n            </button>\n            <button\n              className={'toggle-button' + (this.props.editToggle ? ' toggled': '')}\n              title={ this.props.editToggle ? 'Terminate edit mode': 'Enter edit mode' }\n              onClick={this.props.onToggleEdit}\n              disabled={this.props.node.unit.type !== 'Clause'}\n            >\n              <svg viewBox=\"0 0 24 24\" className=\"icon\">\n                <use xlinkHref={`${icons}#toggle-edit`}/>\n              </svg>\n            </button>\n          </div>\n\n          <h3>\n            {this.props.node.inferenceRule}\n          </h3>\n          {\n            this.props.infoToggle && <ul className=\"stats\">{ statisticsStrings.map((string, key) => <li key={key}>{string}</li>) }</ul>\n          }\n\n          {\n            (this.props.node.unit.type === 'Clause' && this.props.editToggle) ? (\n              <section\n                className={'literal-wrapper' + (this.state.draggable ? ' drag' : '')}\n                onMouseEnter={() => this.setState({draggable: true})}\n                onMouseLeave={() => this.setState({draggable: false})}\n              >\n                {\n                  this.toList(this.props.node.id, this.props.node.unit as Clause, \"premise\")\n                }\n                <span className={'separator separator-arrow count-' + (this.props.node.unit as Clause).premiseLiterals.length}>{'\\u2192'}</span>\n                {\n                  this.toList(this.props.node.id, this.props.node.unit as Clause, \"conclusion\")\n                }\n                <span className={'separator separator-line count-' + (this.props.node.unit as Clause).contextLiterals.length}>&nbsp;</span>\n                {\n                  this.toList(this.props.node.id, this.props.node.unit as Clause, \"context\")\n                }\n              </section>\n            ) : (\n              <section className={'literal-wrapper read-mode'}>\n                {\n                  this.props.node.unit.toHTMLString(false)\n                }\n              </section>\n            )\n          }\n        </article>\n      </section>\n    );\n  }\n\n  toList = (nodeId: number, clause: Clause, orientation: \"premise\" | \"conclusion\" | \"context\") => {\n    const literals = orientation === \"premise\" ? clause.premiseLiterals : (orientation === \"conclusion\" ? clause.conclusionLiterals : clause.contextLiterals);\n\n    return (\n      <Sortable\n        options={{\n          group: 'shared'\n        }}\n        tag={\"ul\"}\n        id={orientation === \"premise\" ? \"id1\" : (orientation === \"conclusion\" ? \"id2\" : \"id3\")}\n        onChange={(_items, _sortable, event)=>{\n          // Hack: If from and to are different, then Sortable generates two identical events (one for each modified list), \n          // so we ignore the latter one using the flag this.keep\n          const from = event.from.id === \"id1\" ? \"premise\" : event.from.id === \"id2\" ? \"conclusion\" : \"context\";\n          const to = event.to.id === \"id1\" ? \"premise\" : event.to.id === \"id2\" ? \"conclusion\" : \"context\";\n          if (from === to) {\n            assert(this.keep);\n          }\n          if (this.keep) {\n            this.props.onLiteralOrientationChange(nodeId, [from, event.oldIndex], [to, event.newIndex]);\n          }\n          if (from !== to) {\n            this.keep = !this.keep;\n          }\n        }}\n      >\n        {\n          literals.map((literal, index) => this.toListItem(literal, index, orientation))\n        }\n      </Sortable>\n      )\n    };\n\n  toListItem = (literal: Literal, index: number, orientation: \"premise\" | \"conclusion\" | \"context\") => {\n    return <li key={index} data-id={index} onDoubleClick={(event) => {\n      this.props.onLiteralRepresentationChange(this.props.node.id, literal);\n      event.currentTarget.innerText = literal.toString(orientation === \"premise\");\n    }}>{literal.toString(orientation === \"premise\")}</li>\n  };\n}\n","import * as React from 'react';\nimport { Dag } from '../model/dag';\n\nimport NodeDetails from '../components/NodeDetails'\nimport { Literal } from '../model/literal';\n\ntype Props = {\n  dag: Dag | null,\n  nodeSelection: number[],\n  currentTime: number,\n  infoToggle: boolean,\n  editToggle: boolean,\n  onLiteralOrientationChange: (nodeId: number, oldPosition: ['premise' | 'conclusion' | 'context', number], newPosition: ['premise' | 'conclusion' | 'context', number]) => void,\n  onLiteralRepresentationChange: (nodeId: number, literal: Literal) => void,\n  onToggleInfo: () => void,\n  onToggleEdit: () => void\n};\n\nexport class NodeDetailsWrapper extends React.Component<Props, {}> {\n\n  render() {\n    if (this.props.nodeSelection.length === 1) {\n      const node = this.props.dag!.get(this.props.nodeSelection[0]);\n      return (\n        <NodeDetails\n          node={node}\n          numberOfTransitiveActivatedChildren={this.props.dag!.numberOfTransitiveActivatedChildren(node.id, this.props.currentTime)}\n          infoToggle={this.props.infoToggle}\n          editToggle={this.props.editToggle}\n          onLiteralOrientationChange={this.props.onLiteralOrientationChange}\n          onLiteralRepresentationChange={this.props.onLiteralRepresentationChange}\n          onToggleInfo={this.props.onToggleInfo}\n          onToggleEdit={this.props.onToggleEdit}\n        />\n      )\n    } else {\n      return (\n        <section className={'component-node-details overview'}>\n          <small id=\"nodeInfo\"><strong>{`${this.props.nodeSelection.length} nodes`}</strong> selected</small>\n        </section>\n      )\n    }\n  }\n}","import * as React from 'react';\n\nimport { Dag } from '../model/dag';\nimport { Literal } from '../model/literal';\nimport { assert } from '../model/util';\nimport { NodeDetailsWrapper } from './NodeDetailsWrapper';\nimport {PassiveDagModal} from './PassiveDagModal';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\n\ntype Props = {\n  dag: Dag,\n  currentTime: number,\n  nodeSelection: number[],\n  infoToggle: boolean,\n  editToggle: boolean,\n  onUpdateNodeSelection: (selection: number[]) => void,\n  onLiteralOrientationChange: (nodeId: number, oldPosition: [\"premise\" | \"conclusion\" | \"context\", number], newPosition: [\"premise\" | \"conclusion\" | \"context\", number]) => void,\n  onLiteralRepresentationChange: (nodeId: number, literal: Literal) => void\n  onSelectButtonPressed: () => void,\n  onToggleInfo: () => void,\n  onToggleEdit: () => void\n};\nexport class PassiveDagAside extends React.Component<Props, {}> {\n\n  render() {\n    assert(this.props.dag.isPassiveDag);\n    assert(this.props.dag.styleMap !== null);\n    const selectClauseButtonEnabled = this.props.nodeSelection.length === 1 && this.props.dag.styleMap!.get(this.props.nodeSelection[0]) === \"passive\";\n\n    return (\n      <aside className=\"component-passive-aside\">\n        <section className=\"component-graph-menu\">\n          <button title=\"Select clauses\"\n                  disabled={!selectClauseButtonEnabled}\n                  onClick={() => { this.props.onSelectButtonPressed();}}>\n            <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n              <use xlinkHref={`${icons}#graph-s`}/>\n            </svg>\n          </button>\n        </section>\n        <NodeDetailsWrapper\n          dag={this.props.dag}\n          nodeSelection={this.props.nodeSelection}\n          currentTime={this.props.currentTime}\n          infoToggle={this.props.infoToggle}\n          editToggle={this.props.editToggle}\n          onLiteralOrientationChange={this.props.onLiteralOrientationChange}\n          onLiteralRepresentationChange={this.props.onLiteralRepresentationChange}\n          onToggleInfo={this.props.onToggleInfo}\n          onToggleEdit={this.props.onToggleEdit}\n        />\n      </aside>\n    );\n  }\n\n}\n","import { assert } from './util'\nimport { Unit } from './unit'\nimport { UnitParser } from './unit-parser';\n\nexport default class SatNode {\n\n  readonly id: number;\n  unit: Unit;\n  readonly inferenceRule: string;\n  readonly parents: number[];\n  statistics: Map<string,number>;\n  readonly isFromPreprocessing: boolean;\n  newTime: number | null;\n  activeTime: number | null;\n  deletionTime: number | null;\n  deletionParents: number[];\n  position: [number,number] | null;\n  isBoundary: boolean;\n\n  constructor(\n    id: number,\n    unit: Unit,\n    inferenceRule: string,\n    parents: number[],\n    statistics: Map<string,number>,\n    isFromPreprocessing: boolean,\n    newTime: number | null,\n    activeTime: number | null,\n    deletionTime: number | null,\n    deletionParents: number[],\n    isBoundary: boolean\n  ) {\n    this.id = id;\n    this.unit = unit;\n    this.inferenceRule = inferenceRule;\n    this.parents = parents;\n    this.statistics = statistics;\n    this.isFromPreprocessing = isFromPreprocessing;\n    this.newTime = newTime;\n    this.activeTime = activeTime;\n    this.deletionTime = deletionTime;\n    this.deletionParents = deletionParents;\n    this.position = null;\n    this.isBoundary = isBoundary;\n  }\n\n  // return a copy of this node, where the position is null\n  copy(): SatNode {\n    return new SatNode(this.id, this.unit, this.inferenceRule, this.parents, this.statistics, this.isFromPreprocessing, this.newTime, this.activeTime, this.deletionTime, this.deletionParents, this.isBoundary);\n  }\n\n  getPosition(): [number,number] {\n    assert(this.position !== null, `accessing position of node with id ${this.id}, which has not been computed`);\n    return this.position as [number,number];\n  }\n\n  toString(): string {\n    return this.unit.toString();\n  }\n\n  toHTMLString(currentTime: number): string {\n    const isActive = this.activeTime !== null && this.activeTime <= currentTime;\n    return this.unit.toHTMLString(isActive);\n  }\n}","import {assert} from './util'\nimport {Literal} from './literal'\n\n// a unit is either a Formula or a clause.\n// units are also used internally by Vampire.\n// we fully parse clauses, but we keep formulas as string.\n// fully parsing formulas is more involved, in particular if one wants to support a reasonably complete subset of tptp.\nexport type Unit = Formula | Clause;\n\nexport class Formula {\n  readonly type: \"Formula\" | \"Clause\";\n  readonly formula: string;\n  \n  constructor(formula: string) {\n    this.type = \"Formula\";\n    this.formula = formula;\n  }\n\n  toString(): string {\n    return this.formula;\n  }\n\n  toHTMLString(isActive: boolean): string {\n    return this.formula;\n  }\n}\n\nexport class Clause {\n  readonly type: \"Formula\" | \"Clause\";\n  premiseLiterals: Literal[];\n  conclusionLiterals: Literal[];\n  contextLiterals: Literal[];\n  \n  // in order to compute literal flows we need to save the order in which literals occured in the clause\n  // at the timepoints of the new-event and the active-event\n  // the referenced literals are not only equal, but the same as the literals in premiseLiterals and conclusionLiterals\n  literalsNewEvent: Literal[] | null;\n  literalsActiveEvent: Literal[] | null;\n\n  constructor(conclusionLiterals: Array<Literal>){\n    this.type = \"Clause\";\n    this.premiseLiterals = [];\n    this.conclusionLiterals = conclusionLiterals;\n    this.contextLiterals = [];\n    this.literalsNewEvent = null;\n    this.literalsActiveEvent = null;\n  }\n\n  changeLiteralOrientation(oldPosition: [\"premise\" | \"conclusion\" | \"context\", number], newPosition: [\"premise\" | \"conclusion\" | \"context\", number]) {\n\n    // remove literal from old position\n    let removedLiterals: Array<Literal> | null = null;\n    if (oldPosition[0] === \"premise\") {\n      assert(0 <= oldPosition[1]);\n      assert(oldPosition[1] < this.premiseLiterals.length);\n      removedLiterals = this.premiseLiterals.splice(oldPosition[1], 1);\n    } else if (oldPosition[0] === \"conclusion\"){\n      assert(0 <= oldPosition[1]);\n      assert(oldPosition[1] < this.conclusionLiterals.length);\n      removedLiterals = this.conclusionLiterals.splice(oldPosition[1], 1);\n    } else {\n      assert(0 <= oldPosition[1]);\n      assert(oldPosition[1] < this.contextLiterals.length);\n      removedLiterals = this.contextLiterals.splice(oldPosition[1], 1);\n    }\n    assert(removedLiterals.length === 1);\n    const removedLiteral = removedLiterals[0];\n\n    // add literal to new position\n    if (newPosition[0] === \"premise\") {\n      assert(0 <= newPosition[1]);\n      assert(newPosition[1] <= this.premiseLiterals.length);\n      this.premiseLiterals.splice(newPosition[1], 0, removedLiteral);\n    } else if (newPosition[0] === \"conclusion\") {\n      assert(0 <= newPosition[1]);\n      assert(newPosition[1] <= this.conclusionLiterals.length);\n      this.conclusionLiterals.splice(newPosition[1], 0, removedLiteral);\n    } else {\n      assert(0 <= newPosition[1]);\n      assert(newPosition[1] <= this.contextLiterals.length);\n      this.contextLiterals.splice(newPosition[1], 0, removedLiteral);\n    }\n    removedLiteral.orientationReason = \"user\";\n  }\n\n  toString(): string {\n    if (this.premiseLiterals.length === 0 && this.conclusionLiterals.length === 0 && this.contextLiterals.length === 0) {\n      return \"$false\"; // empty clause\n    }\n    const literals = this.premiseLiterals.concat(this.conclusionLiterals, this.contextLiterals);\n    return literals.map(literal => literal.toString(false)).join(\" | \");\n  }\n\n  toHTMLString(isActive: boolean): string {\n    let premiseString = this.premiseLiterals\n      .map(literal => literal.isSelected ? (\"<b>\" + literal.toString(true) + \"</b>\") : literal.toString(true))\n      .join(\" & \");\n    let conclusionString = this.conclusionLiterals\n      .map(literal => literal.isSelected ? (\"<b>\" + literal.toString(false) + \"</b>\") : literal.toString(false))\n      .join(\" | \");\n    let contextString = this.contextLiterals\n      .map(literal => literal.isSelected ? (\"<b>\" + literal.toString(false) + \"</b>\") : literal.toString(false))\n      .join(\" | \");\n    let premiseStringWithoutBoldness = this.premiseLiterals\n      .map(literal => literal.toString(true))\n      .join(\" & \");\n    let conclusionStringWithoutBoldness = this.conclusionLiterals\n      .map(literal => literal.toString(false))\n      .join(\" | \");\n    let contextStringWithoutBoldness = this.contextLiterals\n      .map(literal => literal.toString(false))\n      .join(\" | \");\n    if(this.conclusionLiterals.length === 0) {\n      conclusionString = \"$false\";\n      conclusionStringWithoutBoldness = \"$false\";\n    }\n\n    // simple heuristic to estimate the length of the separating line between premise and conclusion.\n    const estimatedLengthOfLine = Math.ceil(Math.max(premiseStringWithoutBoldness.length, conclusionStringWithoutBoldness.length, contextStringWithoutBoldness.length) * 0.8);\n    const line = \"\\u2013\".repeat(estimatedLengthOfLine);\n\n    // don't use bold strings if clause is not activated yet\n    if (!isActive) {\n      premiseString = premiseStringWithoutBoldness;\n      conclusionString = conclusionStringWithoutBoldness;\n      contextString = contextStringWithoutBoldness;\n    }\n\n    const implication = this.premiseLiterals.length === 0 ? conclusionString : (premiseString + \"\\n\\u2192\\n\" + conclusionString);\n\n    return this.contextLiterals.length === 0 ? implication : (implication + \"\\n\" + line + \"\\n\" + contextString);\n  }\n}","import { assert } from \"./util\";\n\nexport class Literal {\n\treadonly name: string;\n\treadonly args: Term[];\n\treadonly negated: boolean;\n\tisSelected: boolean;\n\trepresentation: number;\n\thideBracketsAssoc: boolean;\n\tnonStrictForNegatedStrictInequalities: boolean;\n\tliteralInParent: Literal | null;\n\torientationReason: \"user\" | \"inherited\" | \"heuristic\" | \"none\";\n\n\tconstructor(name:string, args: Term[], negated: boolean){\n\t\tthis.name = name;\n\t\tthis.args = args;\n\t\tthis.negated = negated;\n\t\tthis.isSelected = false;\n\t\tthis.representation = 0; // 0 represents standard representation. Some literals may define other representations\n\t\tthis.hideBracketsAssoc = true;\n\t\tthis.nonStrictForNegatedStrictInequalities = true;\n\t\tthis.literalInParent = null;\n\t\tthis.orientationReason = \"none\";\n\t}\n\n\tsetLiteralInParent(literalInParent: Literal) {\n\t\tthis.literalInParent = literalInParent;\n\t}\n\n\tswitchToNextRepresentation() {\n\t\tif (this.name === \"$less\" || this.name === \"Sub\" || this.name === \"=\") {\n\t\t\tif (this.representation === 0) {\n\t\t\t\tthis.representation = 1;\n\t\t\t} else {\n\t\t\t\tthis.representation = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString(negateLiteral: boolean) : string {\n\t\tconst occursNegated = negateLiteral ? !this.negated : this.negated;\n\n\t\tif (this.name === \"=\") {\n\t\t\tassert(this.args.length === 2, \"equalities must have exactly two arguments\");\n\t\t\tconst switchSides = this.representation === 1;\n\t\t\tconst lhs = this.args[switchSides ? 1 : 0].toString(this.hideBracketsAssoc);\n\t\t\tconst rhs = this.args[switchSides ? 0 : 1].toString(this.hideBracketsAssoc);\n\t\t\treturn lhs + (occursNegated ? \" != \" : \" = \") + rhs;\n\t\t}\n\t\tif (this.name === \"$less\" || this.name === \"Sub\") {\n\t\t\tassert(this.args.length === 2, \"inequalities must have exactly two arguments\");\n\t\t\tconst switchSides = this.representation === 1;\n\t\t\tconst lhs = this.args[switchSides ? 1 : 0].toString(this.hideBracketsAssoc);\n\t\t\tconst rhs = this.args[switchSides ? 0 : 1].toString(this.hideBracketsAssoc);\n\t\t\tlet symbol;\n\t\t\tif (switchSides) {\n\t\t\t\tsymbol = occursNegated ? (this.nonStrictForNegatedStrictInequalities ? \" <= \" : \" !> \") : \" > \";\n\t\t\t} else {\n\t\t\t\tsymbol = occursNegated ? (this.nonStrictForNegatedStrictInequalities ? \" >= \" : \" !< \") : \" < \";\n\t\t\t}\n\t\t\treturn lhs + symbol + rhs;\n\t\t}\n\n\t\t// could also use logical-not-symbol: \"\\u00AC\"\n\t\treturn (occursNegated ? \"!\" : \"\") + this.name + \"(\" + this.args.map(arg => arg.toString(this.hideBracketsAssoc)).join(\",\") + \")\";\n\t}\n}\n\nexport class Term {\n\treadonly name: string;\n\treadonly args: Term[];\n\treadonly isVariable: boolean;\n\t\n\tconstructor(name: string, args: Term[]) {\n\t\tthis.name = name;\n\t\tthis.args = args;\n\t\tconst isVariable = name.startsWith(\"X\")\n\t\tthis.isVariable = isVariable;\n\t\tif(isVariable) {\n\t\t\tassert(this.args.length === 0);\n\t\t}\n\t}\n\n\ttoString(hideBracketsAssoc: boolean): string {\n\t\tlet name = this.name;\n\t\tif(this.name === \"$sum\") {\n\t\t\tname = \"+\";\n\t\t} else if(this.name === \"$uminus\") {\n\t\t\tname = \"-\";\n\t\t}\n\n\t\tif(this.args.length === 0){\n\t\t\treturn name;\n\t\t} else {\n\t\t\tif (name === \"+\"){\n\t\t\t\tconst inner = this.args.map(arg => arg.toString(hideBracketsAssoc)).join(\"+\");\n\t\t\t\tif (hideBracketsAssoc) {\n\t\t\t\t\treturn inner;\n\t\t\t\t} else {\n\t\t\t\t\treturn \"(\" + inner + \")\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn name + \"(\" + this.args.map(arg => arg.toString(hideBracketsAssoc)).join(\",\") + \")\";\n\t\t}\n\t}\n}\n\n\n\n","import {assert} from './util'\nimport {Unit, Formula, Clause} from './unit'\nimport {Literal, Term} from './literal'\n\n// class for parsing Units, Formulas, Clauses, Literals and Terms\nexport class UnitParser {\n\n\tstatic parsePreprocessingUnit(string: string): Unit {\n\t\t// heuristic to determine whether unit is a clause:\n\t\t// if unit only contains certain symbols, it has to be a clause\n\t\t// otherwise, treat it as a formula.\n\t\tconst symbolsAllowedInClauses = /^[a-zA-Z0-9()=,~!$ |']+$/;\n\t\tlet isClause = string.match(symbolsAllowedInClauses);\n\t\n\t\tif(isClause) {\n\t\t  return UnitParser.parseClause(string);\n\t\t} else {\n\t\t  return new Formula(string);\n\t\t}\n\t}\n\n\tstatic parseClause(string: string): Clause {\n\t\tif(string === \"$false\") {\n\t\t\treturn new Clause([]); // empty clause\n\t\t}\n\t\tconst literalStrings = string.split(\" | \")\n\n\t\tconst literals = new Array<Literal>();\n\t\tfor (let i = 0; i < literalStrings.length; i++) {\n\t\t\tliterals.push(UnitParser.parseLiteral(literalStrings[i]));\n\t\t}\n\t\t\n\t\treturn new Clause(literals);\n\t}\n\n\tstatic parseLiteral(string: string): Literal {\n\t\t// need to handle equality separately, since it is written in infix-notation\n\t\t// all other predicates are written in prefix-notation\n\t\tlet equalityPosition = string.search(\"=\");\n\t\tif(equalityPosition !== -1)\n\t\t{\n\t\t\t// Vampire's printing of FOOL-formulas is quite hacky,\n\t\t\t// in particular FOOL-equalities always occur inside brackets, even for top-level literals\n\t\t\t// where the brackets are unnecessary\n\t\t\tif(string[0] === \"(\") {\n\t\t\t\tassert(string[string.length - 1] === \")\");\n\t\t\t\tstring = string.substring(1, string.length - 1);\n\t\t\t\tassert(equalityPosition > 0);\n\t\t\t\tequalityPosition -= 1;\n\t\t\t}\n\t\t\tif(string[equalityPosition - 1] === \"!\") {\n\t\t\t\tassert(string[equalityPosition - 2] === \" \", `negated equality not surrounded by spaces in string ${string}`);\n\t\t\t\tassert(string[equalityPosition + 1] === \" \", `negated equality not surrounded by spaces in string ${string}`);\n\t\t\t\tconst lhsString = string.substring(0, equalityPosition - 2);\n\t\t\t\tconst rhsString = string.substring(equalityPosition + 2, string.length);\n\t\t\t\tconst lhs = UnitParser.parseTerm(lhsString);\n\t\t\t\tconst rhs = UnitParser.parseTerm(rhsString);\n\t\t\t\treturn new Literal(\"=\", [lhs, rhs], true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tassert(string[equalityPosition - 1] === \" \", `equality not surrounded by spaces in string ${string}`);\n\t\t\t\tassert(string[equalityPosition + 1] === \" \", `equality not surrounded by spaces in string ${string}`);\n\t\t\t\tconst lhsString = string.substring(0, equalityPosition - 1);\n\t\t\t\tconst rhsString = string.substring(equalityPosition + 2, string.length);\n\t\t\t\tconst lhs = UnitParser.parseTerm(lhsString);\n\t\t\t\tconst rhs = UnitParser.parseTerm(rhsString);\n\t\t\t\t\n\t\t\t\treturn new Literal(\"=\", [lhs, rhs], false);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconst negated = (string[0] === \"~\");\n\t\t\tconst atomString = negated ? string.substring(1) : string;\n\n\t\t\t// parse atom as term first and then convert it to literal\n\t\t\tconst literalTerm = UnitParser.parseTerm(atomString);\n\t\t\treturn new Literal(literalTerm.name, literalTerm.args, negated);\n\t\t}\n\t}\n\n\tstatic parseTerm(string:string): Term {\n\t\t// Part 1: lex tokens\n\t\tlet tokens: string[] = [];\n\t\tlet stringPos = 0;\n\t\twhile(stringPos < string.length) {\n\t\t\tconst char = string[stringPos];\n\t\t\t\n\t\t\tif (char === \"(\" || char === \")\" || char === \",\") {\n\t\t\t\ttokens.push(char);\n\t\t\t\tstringPos = stringPos + 1;\n\t\t\t} else {\n\t\t\t\tlet tokenEnd = stringPos;\n\t\t\t\twhile(tokenEnd < string.length \n\t\t\t\t\t&& string[tokenEnd] !== \"(\" \n\t\t\t\t\t&& string[tokenEnd] !== \")\" \n\t\t\t\t\t&& string[tokenEnd] !== \",\") {\n\t\t\t\t\ttokenEnd = tokenEnd + 1;\n\t\t\t\t}\n\t\t\t\ttokens.push(string.substring(stringPos,tokenEnd));\n\t\t\t\tstringPos = tokenEnd;\n\t\t\t}\n\t\t}\n\n\t\t// Part 2: add brackets after each string token which is not succeeded by brackets (that is, for each constant)\n\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\tconst token = tokens[i];\n\t\t\tif(token !== \"(\" && token !== \")\" && token !== \",\"){\n\t\t\t\tif(i+1 === tokens.length || tokens[i+1] !== \"(\") {\n\t\t\t\t\ttokens.splice(i+1,0,\"(\");\n\t\t\t\t\ttokens.splice(i+2,0,\")\");\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\n\t\t// Part 3: parse token array\n\t\tlet stack: Array<Array<string|Term>> = [[]];\n\n\t\tfor (let pos = 0; pos < tokens.length; pos++) {\n\t\t\tconst token = tokens[pos];\n\n\t\t\tif(token !== \"(\" && token !== \")\" && token !== \",\")\n\t\t\t{\n\t\t\t\tstack[stack.length - 1].push(token);\n\t\t\t} \n\t\t\telse if (token === \"(\") \n\t\t\t{\n\t\t\t\tstack.push([]);\n\t\t\t}\n\t\t\telse if (token === \")\") \n\t\t\t{\n\t\t\t\tconst args = stack.pop() as Array<string | Term>;\n\t\t\t\tconst name = stack[stack.length - 1].pop();\n\t\t\t\tconst f = new Term(name as string, args as Array<Term>);\n\t\t\t\tstack[stack.length - 1].push(f);\n\t\t\t}\n\t\t}\n\n\t\tassert(stack.length === 1, \"invar violated for string: \" + string);\n\t\t// assert(stack[0].length === 1, \"invar violated for string:\" + string + \":\");\n\t\treturn stack[0][0] as Term;\n\t}\n}","\nimport { assert } from \"./util\";\nimport { Dag } from \"./dag\";\nimport SatNode from \"./sat-node\";\n\n// iterator for traversing DAG, where each node is visited only after all parents are visited\n// implements standard iterative depth-first postorder traversal\nexport class DFPostOrderTraversal {\n\t\n\treadonly dag: Dag;\n\ttodo: Array<number>;\n\tvisited: Set<number>;\n\t\n\tconstructor(dag: Dag) {\n\t\tthis.dag = dag;\n\t\tthis.todo = Array.from(dag.leaves);\n\t\tthis.visited = new Set();\n\t}\n\n\thasNext(): boolean {\n\t\twhile (this.todo.length > 0) {\n\t\t\tconst last = this.todo[length - 1];\n\t\t\tif (this.visited.has(last)) {\n\t\t\t\tthis.todo.pop();\n\t\t\t} else {\n\t\t\t\t// there exists at least one unvisited node\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t// returns the next node (the actual node, not its id) for traversal\n\t// note: only call this method after checking for has_next\n\tgetNext(): SatNode {\n\t\twhile (this.todo.length > 0) {\n\t\t\tconst currentId = this.todo[this.todo.length - 1];\n\t\t\tconst currentNode = this.dag.get(currentId);\n\n\t\t\t// if we haven't already visited the current unit\n\t\t\tif (!this.visited.has(currentId)) {\n\t\t\t\tlet existsUnvisitedParent = false;\n\t\t\t\t\n\t\t\t\t// add unprocessed parents to stack for DFS.\n\t\t\t\t// If there is at least one unprocessed parent, don't compute the result\n\t\t\t\t// for current_id now, but wait until those unprocessed parents are processed.\n\t\t\t\tfor (const parentId of currentNode.parents) {\n\t\t\t\t\t// if we haven't visited the parent yet\n\t\t\t\t\tif (! this.visited.has(parentId)) {\n\t\t\t\t\t\t// add it to the stack\n\t\t\t\t\t\tthis.todo.push(parentId);\n\t\t\t\t\t\texistsUnvisitedParent = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if we already visited all parents, we can visit the node too\n\t\t\t\tif (!existsUnvisitedParent) {\n\t\t\t\t\tthis.visited.add(currentId);\n\t\t\t\t\tthis.todo.pop();\n\t\t\t\t\treturn currentNode;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.todo.pop();\n\t\t\t}\n\t\t}\n\t\tassert(false, \"We have already iterated through all the inferences, so getNext() should not been called\");\n\t\treturn null as unknown as SatNode;\n\t}\n}\n\n// iterator for traversing DAG, where each node is visited before any parent node is visited\n// implemented as reversed postorder traversal\nexport class ReversePostOrderTraversal {\n\tpostOrder: Array<SatNode>;\n\n\tconstructor(dag: Dag) {\n\t\t// compute post order and save result in postOrder\n\t\tconst it = new DFPostOrderTraversal(dag);\n\t\tthis.postOrder = [];\n\t\twhile (it.hasNext()) {\n\t\t\tthis.postOrder.push(it.getNext() as SatNode);\n\t\t}\n\t}\n\n\thasNext(): boolean {\n\t\treturn this.postOrder.length > 0;\n\t}\n\n\tgetNext(): SatNode {\n\t\tassert(this.hasNext(), \"We have already iterated through all the inferences, so getNext() should not have been called\");\n\t\treturn this.postOrder.pop() as SatNode;\n\t}\n\n}","import { Literal, Term } from \"./literal\";\nimport { assert } from \"./util\";\n\nexport type Substitution = Map<string, Term>;\n\nexport function literalsMatch(literal1: Literal, literal2: Literal, allowSubstitutions: boolean) {\n\tif (allowSubstitutions) {\n\t\treturn isSubstitution(literal1, literal2);\n\t} else {\n\t\treturn isEqual(literal1, literal2);\n\t}\n}\n\nexport function isEqual(literal1: Literal, literal2: Literal): boolean {\n\tif (literal1.name !== literal2.name || literal1.negated !== literal2.negated || literal1.args.length !== literal2.args.length) {\n\t\treturn false;\n\t}\n\tlet success = true;\n\tfor (let i = 0; i < literal1.args.length; i++) {\n\t\tconst arg1 = literal1.args[i];\n\t\tconst arg2 = literal2.args[i];\n\t\tif (!termsAreEqual(arg1,arg2)) {\n\t\t\tsuccess = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// support commutativity of equalities\n\tif (!success && literal1.name === \"=\") {\n\t\tassert(literal1.args.length === 2);\n\t\tsuccess = \n\t\t\ttermsAreEqual(literal1.args[0], literal2.args[1]) &&\n\t\t\ttermsAreEqual(literal1.args[1], literal2.args[0]);\n\t}\n\n\treturn success;\n}\n\nexport function termsAreEqual(f1: Term, f2: Term) {\n\tif (f1.name !== f2.name || f1.args.length !== f2.args.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < f1.args.length; i++) {\n\t\tconst arg1 = f1.args[i];\n\t\tconst arg2 = f2.args[i];\n\t\tif (!termsAreEqual(arg1,arg2)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n// returns true if literal1 can be obtained from literal2 by substitution\nexport function isSubstitution(literal1: Literal, literal2: Literal): boolean {\n\tif (literal1.name !== literal2.name || literal1.negated !== literal2.negated || literal1.args.length !== literal2.args.length) {\n\t\treturn false;\n\t}\n\tlet success = true;\n\tconst substitution = new Map<string, Term>();\n\tfor (let i = 0; i < literal1.args.length; i++) {\n\t\tconst arg1 = literal1.args[i];\n\t\tconst arg2 = literal2.args[i];\n\t\tsuccess = computeSubstitution(arg1,arg2, substitution);\n\t\tif (!success) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// support commutativity of equalities\n\tif (!success && literal1.name === \"=\") {\n\t\tassert(literal1.args.length === 2);\n\t\tconst substitutionEq = new Map<string, Term>();\n\t\tsuccess = computeSubstitution(literal1.args[0], literal2.args[1], substitutionEq);\n\t\tif (success) {\n\t\t\tsuccess = computeSubstitution(literal1.args[1], literal2.args[0], substitutionEq);\n\t\t}\n\t}\n\t\n\treturn success;\n}\n\n// compute whether f1 can be obtained from f2 using a substitution compatible with substitution\n// if yes, returns true and updates the substitution\n// if no, returns false, and there are no guarantees on the state of substitution\nexport function computeSubstitution(f1: Term, f2: Term, substitution: Substitution): boolean {\n\tif (f1.name === f2.name && f1.args.length === f2.args.length) {\n\t\tfor (let i = 0; i < f1.args.length; i++) {\n\t\t\tconst arg1 = f1.args[i];\n\t\t\tconst arg2 = f2.args[i];\n\t\t\tconst success = computeSubstitution(arg1,arg2, substitution);\n\t\t\tif (!success) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (f2.isVariable) {\n\t\tconst substitutedVariable = substitution.get(f2.name);\n\t\tif (substitutedVariable === undefined) {\n\t\t\tsubstitution.set(f2.name, f1);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn computeSubstitution(f1, substitutedVariable, substitution);\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}","import SatNode from './sat-node';\nimport { assert } from './util';\nimport { UnitParser } from './unit-parser';\nimport { ReversePostOrderTraversal, DFPostOrderTraversal } from \"./traversal\";\nimport { Clause } from './unit';\nimport { literalsMatch } from './substitution';\nimport { Literal } from './literal';\n\nexport class ParsedLine {\n  readonly type: \"preprocessing\" | \"new\" | \"active\" | \"forward reduce\" | \"backward reduce\" | \"replaced by\" | \"using\";\n  readonly id: number;\n  readonly unitString: string;\n  readonly inferenceRule: string;\n  parents: Array<number>;\n  readonly statistics: Map<any, any>; \n\n  constructor(type: \"preprocessing\" | \"new\" | \"active\" | \"forward reduce\" | \"backward reduce\" | \"replaced by\" | \"using\", id: number, unitString: string, inferenceRule: string, parents: Array<number>, statistics: Map<any, any>) {\n    this.type = type;\n    this.id = id;\n    this.unitString = unitString;\n    this.inferenceRule = inferenceRule;\n    this.parents = parents;\n    this.statistics = statistics;\n  }\n}\n\nexport type SatNodeStyle = \"passive\" | \"deleted\" | \"activated\" | \"activated-deleted\" | \"boundary\" | \"boundary-deleted\" | \"preprocessing\" | \"preprocessing-deleted\" | \"theory-axiom\" | 'theory-axiom-deleted' | \"conjecture\";\nexport class Dag {\n\n  // TODO: it seems that the result of Graphviz depends on the order of node- and edge declarations.\n  //       the order of these declarations depends on the order in which the nodes occur in the nodes-Map.\n  //       therefore it could make sense to normalize the order of nodes in the nodes-Map at construction time of the Dag.\n  readonly nodes: Map<number,SatNode>;\n  readonly leaves: Set<number>;\n  readonly mergeMap: Map<number, Array<number>> | null;\n  \n  // invar: if isPassiveDag, then styleMap !== null\n  readonly isPassiveDag: boolean;\n  readonly styleMap: Map<number, SatNodeStyle> | null;\n  readonly activeNodeId: number | null; // the id of the node for which passiveDag was computed\n\n  constructor(nodes: Map<number,SatNode>, mergeMap: Map<number, Array<number>> | null = null, isPassiveDag: boolean = false, styleMap: Map<number, SatNodeStyle> | null = null, activeNodeId: number | null = null) {\n    this.nodes = nodes;\n    this.mergeMap = mergeMap;\n\n    assert(!isPassiveDag || styleMap !== null);\n    assert(!isPassiveDag || activeNodeId !== null);\n    assert(!isPassiveDag || nodes.has(activeNodeId as number));\n\n    this.isPassiveDag = isPassiveDag;\n    this.styleMap = styleMap;\n    this.activeNodeId = activeNodeId;\n\n    // sanity check: key and id of node need to match\n    for (const [nodeId, node] of nodes) {\n      assert(nodeId === node.id, `key ${nodeId} and id ${node.id} of node ${node} don't match!`);\n    }\n\n    // sanity check: each parentId needs to occur in the derivation as node\n    for (const [nodeId, node] of nodes) {\n      for (const parentId of node.parents) {\n        assert(nodes.has(parentId), `node ${nodeId} has parent ${parentId} which does not occur as node in the dag!`);\n      }\n    }\n    // compute leaves\n    const leaves: Set<number> = new Set();\n    const nonLeaves: Set<number> = new Set();\n    \n    for (const node of nodes.values()) {\n      for (const parentId of node.parents) {\n        nonLeaves.add(parentId);\n      }\n    }\n\n    for (const nodeId of nodes.keys()) {\n      if(!nonLeaves.has(nodeId)) {\n        leaves.add(nodeId);\n      }\n    }\n\n    this.leaves = leaves;\n  }\n\n  get(nodeId: number): SatNode {\n    const node = this.nodes.get(nodeId);\n    assert(node !== undefined, \"node doesn't occur in Dag\");\n    return node as SatNode;\n  }\n\n  maximalActiveTime(): number {\n    let max = 0;\n    for (const node of this.nodes.values()) {\n      if (node.activeTime !== null && node.activeTime > max) {\n        max = node.activeTime;\n      }\n    }\n    return max;\n  }\n\n  isEmpty(): boolean {\n    return this.nodes.size === 0;\n  }\n\n  getChildren(nodeId: number): Array<number> {\n    if(!this.nodes.has(nodeId)) {\n      assert(false, \"Node with id \" + nodeId + \" does not occur in Dag\");\n    }\n\n    const children = new Array<number>();\n    for (const node of this.nodes.values()) {\n      for (const parentId of node.parents) {\n        if (parentId === nodeId) {\n          children.push(node.id);\n        }\n      }\n    }\n    return children;\n  }\n\n  numberOfTransitiveActivatedChildren(nodeId: number, currentTime: number) {\n    let counter = 0;\n\n        // use new set to avoid mutating relevantIds\n    const transitiveChildrenIds = new Set<number>([nodeId]);\n\n    // add all transitive children of ids in transitiveChildren to transitiveChildren\n    const iterator = new DFPostOrderTraversal(this);\n    while (iterator.hasNext()) {\n      let currentNode = iterator.getNext();\n\n      // check if currentNode occurs in transitiveChildren or\n      // has a parent which occurs in transitiveChildren\n      let existsRelevantParent = false;\n      for (const parentId of currentNode.parents) {\n        if (transitiveChildrenIds.has(parentId)) {\n          existsRelevantParent = true;\n          break;\n        }\n      }\n      const isRelevant = existsRelevantParent || transitiveChildrenIds.has(currentNode.id);\n      const alreadyGenerated = currentNode.isFromPreprocessing || (currentNode.newTime !== null && currentNode.newTime <= currentTime);\n      if (isRelevant && alreadyGenerated) {\n        // add its id to the set of relevant ids\n        transitiveChildrenIds.add(currentNode.id);\n\n        const alreadyActivated = currentNode.activeTime !== null && currentNode.activeTime <= currentTime;\n        if (currentNode.id !== nodeId && alreadyActivated) {\n          counter = counter + 1;\n        }\n      }\n    }\n\n    return counter;\n  }\n\n  /* we can partition all nodes of the derivation into three sets\n   * 1) inputNodes: the nodes given to Vampire's preprocessing as input\n   * 2) preprocessingResultNodes: the nodes remaining at the end of Vampire's preprocessing, (which are then used as input for saturation)\n   * 3) otherNodes: the nodes generated by saturation\n   *\n   * this function decides for a given node whether it should be treated as input node, using the following idea:\n   * 1) input nodes occur before saturation is started and are therefore tagged with \"isFromPreprocessing\"\n   * 2) preprocessingResultNodes are used as input for saturation, so their newTime is set\n   */ \n  nodeIsInputNode(nodeId: number): boolean {\n    const node = this.get(nodeId);\n\n    if (!node.isFromPreprocessing) {\n      return false;\n    }\n    if(node.newTime !== null) {\n      return false;\n    }\n    return true;\n  }\n\n  // heuristics to determine whether a node is a theory axiom\n  // note: Vampire uses \"theory axiom\" for some of the internal theory axioms\n  // the internal theory axioms added for term algebras do not follow this convention\n  // even more, one of those term algebra axioms (the exhaustiveness axiom) is added as formula (in contrast to all other axioms which are added as clauses)\n  // in particular, the exhaustiveness axiom consists of a formula labelled \"term algebras exhaustiveness\" and a child node which is labelled cnf transformation\n  nodeIsTheoryAxiom(nodeId: number): boolean {\n    const node = this.get(nodeId);\n\n    if (!node.isFromPreprocessing) {\n      return false;\n    }\n    if (node.inferenceRule === \"theory axiom\" || \n        node.inferenceRule === \"term algebras injectivity\" || \n        node.inferenceRule === \"term algebras distinctness\" ||\n        node.inferenceRule === \"term algebras exhaustiveness\" ||\n        (node.parents.length === 1 && this.get(node.parents[0]).inferenceRule ===  \"term algebras exhaustiveness\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // either 1) create a new dag given an array of parsed lines and no existing dag,\n  // or     2) extend an existing dag with an array of parsed lines\n  // In case 2) we assume that all the parsedLines are generated during Saturation, i.e. no additional preprocessing occurs.\n  static fromParsedLines(parsedLines: Array<ParsedLine>, existingDag: Dag | null): Dag {\n    const nodes = (existingDag === null) ? new Map<number, SatNode>() : new Map<number, SatNode>(existingDag.nodes);\n\n    let currentNode: SatNode | null = null;\n    let currentTime = (existingDag === null) ? 0 : existingDag.maximalActiveTime();\n\n    let emptyClauseNode: SatNode | null = null;\n\n    for (const line of parsedLines) {\n\n      // some preprocessing nodes have potentially been merged, and there could be parsedLines which still reference the ids of these nodes.\n      // we therefore convert those ids using the merge-map\n      if (existingDag !== null && existingDag.mergeMap !== null) {\n        assert(existingDag.mergeMap.get(line.id) === undefined, `found line with id ${line.id} of node deleted during merge of preprocessing nodes!`);\n        const parentsAfterMerge = new Array<number>();\n        for (const parentId of line.parents) {\n          const mergedParentsOrUndefined = existingDag.mergeMap.get(parentId);\n          if (mergedParentsOrUndefined !== undefined) {\n            parentsAfterMerge.push(...mergedParentsOrUndefined);\n          } else {\n            parentsAfterMerge.push(parentId);\n          }\n        }\n        line.parents = parentsAfterMerge;\n      }\n\n      if (line.type === \"preprocessing\") {\n        // line represents the generation of a clause during preprocessing\n        assert(existingDag === null, \"no new preprocessing lines should occur while extending existing dag with new nodes from saturation\")\n        assert(!nodes.has(line.id), \"each clause must be generated by preprocessing only once\");\n        const unit = UnitParser.parsePreprocessingUnit(line.unitString);\n\n        // hack: Vampire treats a conjecture as input clause, followed by an inference, which transforms the input into a negated conjecture.\n        // we want only the negated conjecture, so we delete the (single) premise of such an inference if it occurs.\n        if (line.inferenceRule === \"negated conjecture\") {\n          assert(line.parents.length === 1);\n          // remove parent from nodes\n          const parent = nodes.get(line.parents[0]);\n          assert(parent !== undefined);\n          assert((parent as SatNode).inferenceRule === \"input\");\n          const success = nodes.delete(line.parents[0]);\n          assert(success);\n          // update parents of current line\n          line.parents = [];\n        }\n\n        currentNode = new SatNode(line.id, unit, line.inferenceRule, line.parents, line.statistics, true, null, null, null, [], false);\n        nodes.set(currentNode.id, currentNode);\n      }\n      else if (line.type === \"new\") {\n        if (!nodes.has(line.id)) {\n          // line represents the generation of a new clause (which wasn't generated in preprocessing) during saturation\n          \n          // create new node\n          const unit = UnitParser.parseClause(line.unitString);\n          unit.literalsNewEvent = unit.conclusionLiterals;\n          currentNode = new SatNode(line.id, unit, line.inferenceRule, line.parents, line.statistics, false, currentTime, null, null, [], false);\n          nodes.set(currentNode.id, currentNode);\n\n          if(line.unitString === \"$false\") {\n            emptyClauseNode = currentNode;\n          }\n        } else {\n          // line represents a final clause from preprocessing, which now is added into saturation\n          assert(existingDag === null, \"no new final clauses from preprocessing should occur during the extension of an existing dag\")\n          currentNode = nodes.get(line.id) as SatNode;\n          assert(currentNode.isFromPreprocessing, \"a newly added clause can only already exist if it was generated during preprocessing\");\n          assert(line.inferenceRule === currentNode.inferenceRule, \"inference rule differs between line and existing node\");\n          const unit = UnitParser.parseClause(line.unitString);\n          unit.literalsNewEvent = unit.conclusionLiterals;\n          currentNode.unit = unit;\n          currentNode.newTime = currentTime;\n        }\n      }\n      else if (line.type === \"active\") {\n        // line represents the addition of that clause to active\n        // an active-event gives us the following information about a clause:\n        // - the node was activated at the current time.\n        // - the number of selected literals in the clause, saved in the statistics-object (\"nSel\") of the active-event\n        // - the literals in the clause which are selected: the clause of the active-event satisfies the invariant that the selected literals occur first.\n        // - some statistics about the clause and its derivation, saved in the statistics-object of the active-event\n        assert(nodes.has(line.id), `Found clause with id ${line.id}, which was added to active, but wasn't added to new before. Maybe you forgot to output the new clauses?`);\n        currentNode = nodes.get(line.id) as SatNode;\n        assert(line.id === currentNode.id, \"id differs between line and existing node\");\n        assert(line.inferenceRule === currentNode.inferenceRule, \"inference rule differs between line and existing node\");\n        assert(line.parents.length === currentNode.parents.length, \"number of parents differs between line and existing node\");\n        for (let i = 0; i < line.parents.length; i++) {\n          assert(line.parents[i] === currentNode.parents[i], `line and node differ on parent ${i}, which is ${line.parents[i]} resp. ${currentNode.parents[i]}.`);\n        }\n        assert(currentNode.newTime !== null, \"for each event [SA] active ... there has to be an earlier event of the form [SA] new ... with the same clause!\")\n        assert(currentNode.activeTime === null, \"there must only be 1 event of the form [SA] active ... for each clause\");\n        assert(currentNode.unit.type === \"Clause\");\n        const clause = currentNode.unit as Clause;\n        assert(clause.literalsNewEvent !== null);\n\n        // note that the literals in clauseAfterActivation potentially occur in a different order than in clause,\n        // since clauseAfterActivation satisfies the invariant that the selected literals occur first.\n        const clauseAfterActivation = UnitParser.parseClause(line.unitString);\n        assert(clauseAfterActivation.premiseLiterals.length === 0);\n\n        // mpa each literal to a literal in the existing clause\n        // for each selected literal also mark the literal in the existing clause as selected.\n        const nSel = line.statistics.get(\"nSel\");\n        assert(nSel !== undefined && nSel !== null);\n\n        const existingLiteralsActiveOrder = new Array<Literal>();\n        for (let i = 0; i < clauseAfterActivation.conclusionLiterals.length; i++) {\n          const literal = clauseAfterActivation.conclusionLiterals[i];\n          let foundMatch = false;\n          for (const existingLiteral of clause.literalsNewEvent!) {\n            if (literalsMatch(literal, existingLiteral, false)) {\n              existingLiteralsActiveOrder.push(existingLiteral);\n              foundMatch = true;\n              if (i < nSel) {\n                existingLiteral.isSelected = true;\n              }\n              break;\n            }\n          }\n          assert(foundMatch);\n        }\n        clause.literalsActiveEvent = existingLiteralsActiveOrder;\n\n        currentTime = currentTime + 1;\n        currentNode.activeTime = currentTime;\n        currentNode.statistics = line.statistics\n      }\n      else if (line.type === \"forward reduce\" || line.type === \"backward reduce\") {\n        // line represents the removal of a clause from saturation\n        assert(nodes.has(line.id), `Found clause with id ${line.id}, which was deleted, but wasn't added as new before. Maybe you forgot to output the new clauses?`);\n        currentNode = nodes.get(line.id) as SatNode;\n        currentNode.deletionTime = currentTime;\n      }\n      else if (line.type === \"replaced by\" || line.type === \"using\") {\n        // line represents one of the clauses which allowed to remove the clause represented by currentNode from saturation\n        assert(currentNode !== null, \"invar\");\n        (currentNode as SatNode).deletionParents.push(line.id);\n      }\n      else {\n        assert(false, `invalid line: ${line.unitString}`);\n      }\n    }\n\n    // hack: pretend that empty clause was added to passive and then activated\n    // note that this can only be done after all lines are parsed, since a new-event with the empty clause often triggers a deletion-event\n    if (emptyClauseNode !== null) {\n      currentTime = currentTime + 1;\n      emptyClauseNode.activeTime = currentTime;\n      nodes.set(emptyClauseNode.id, emptyClauseNode);\n    }\n\n    const extendedDag = new Dag(nodes, existingDag === null ? null : existingDag.mergeMap);\n\n    return extendedDag;\n  }\n\n  // note: includes nodes which have been activated, but have also been deleted\n  computeActiveNodes(currentTime: number) : Set<number> {\n    const activeNodeIds = new Set<number>();\n    for (const [nodeId, node] of this.nodes) {\n      const nodeIsActive = (node.activeTime !== null && node.activeTime <= currentTime);\n      if (nodeIsActive) {\n        activeNodeIds.add(nodeId);\n      }\n    }\n\n    return activeNodeIds;\n  }\n\n  // Definition: the active dag contains all nodes which occur in the derivation of an already activated node, and all preprocessing nodes\n  computeNodesInActiveDag(currentTime: number) : Set<number> {\n    const nodeIds = this.computeActiveNodes(currentTime);\n\n\t  // add all transitive parents of nodeIds to nodeIds\n\t  const iterator = new ReversePostOrderTraversal(this);\n\t  while (iterator.hasNext()) {\n\t\t  const currentNode = iterator.getNext();\n      const currentNodeId = currentNode.id;\n    \n      if (nodeIds.has(currentNodeId)) {\n        for (const parentId of currentNode.parents) {\n          nodeIds.add(parentId);\n        }\n      }    \n    }\n\n    // add all preprocessing nodes\n    for (const node of this.nodes.values()) {\n      if (node.isFromPreprocessing) {\n        nodeIds.add(node.id);\n      }\n    }\n    \n    return nodeIds;\n  }\n\n  isRefutation(): boolean {\n    for (const node of this.nodes.values()) {\n      if(node.unit.type == \"Clause\" && \n          (node.unit as Clause).premiseLiterals.length == 0 && \n          (node.unit as Clause).conclusionLiterals.length == 0) {\n            return true;\n          }\n    }\n    return false;\n  }\n}","import { assert } from \"./util\";\nimport { Dag, SatNodeStyle } from \"./dag\";\nimport SatNode from \"./sat-node\";\nimport { ReversePostOrderTraversal, DFPostOrderTraversal } from \"./traversal\";\n\n// returns a new dag containing only the nodes which either\n// have an id in relevantIds or\n// are transitive parents of a node with id in relevantIds\nexport function filterNonParents(dag: Dag, relevantIds: Set<number>) {\n\t// use new set to avoid mutating relevantIds\n\tconst transitiveParentIds = new Set(relevantIds);\n\n\t// need to compute remaining nodes\n\tconst remainingNodes = new Map<number, SatNode>();\n\n\t// add all transitive parents of transitive_parents to transitiveParents\n\tconst iterator = new ReversePostOrderTraversal(dag);\n\twhile (iterator.hasNext()) {\n\t\tconst currentNode = iterator.getNext();\n\t\tconst currentNodeId = currentNode.id;\n\n\t\t// if currentNode is relevant\n\t\tif (transitiveParentIds.has(currentNodeId)) {\n\t\t\t\n\t\t\t// mark parents relevant\n\t\t\tcurrentNode.parents.forEach(parentId => transitiveParentIds.add(parentId));\n\n\t\t\t// add node to remainingNodes\n\t\t\tremainingNodes.set(currentNodeId,currentNode);\n\t\t}\n\t}\n\n\t// create deep copy of nodes\n\t// needed so that layout computation for the transformed dag does not overwrite the layout of the original dag\n\tconst remainingNodesDeepCopy = new Map<number, SatNode>();\n\tfor (const [nodeId,node] of remainingNodes) {\n\t\tremainingNodesDeepCopy.set(nodeId, node.copy());\n\t}\n\treturn new Dag(remainingNodesDeepCopy);\n}\n\n// returns a new dag containing only the nodes which either\n// have an id in relevant_ids or\n// are transitive children of a node with id in relevant_ids.\n// additionally keeps boundary nodes\nexport function filterNonConsequences(dag: Dag, relevantIds: Set<number>) {\n\t// use new set to avoid mutating relevantIds\n\tconst transitiveChildrenIds = new Set<number>(relevantIds);\n\n\t// need to compute remaining nodes\n\tconst remainingNodes = new Map<number, SatNode>();\n\n\t// add all transitive children of ids in transitiveChildren to transitiveChildren\n\tconst iterator = new DFPostOrderTraversal(dag);\n\twhile (iterator.hasNext()) {\n\t\tlet currentNode = iterator.getNext();\n\n\t\t// check if currentNode occurs in transitiveChildren or\n\t\t// has a parent which occurs in transitiveChildren\n\t\tlet existsRelevantParent = false;\n\t\tfor (const parentId of currentNode.parents) {\n\t\t\tif (transitiveChildrenIds.has(parentId)) {\n\t\t\t\texistsRelevantParent = true;\n\t\t\t}\n\t\t}\n\t\tconst isRelevant = transitiveChildrenIds.has(currentNode.id) || existsRelevantParent;\n\n\t\tif (isRelevant) {\n\t\t\t// add its id to the set of relevant ids\n\t\t\ttransitiveChildrenIds.add(currentNode.id);\n\n\t\t\t// if there exists at least one relevant parent, \n\t\t\tif (existsRelevantParent) {\n\t\t\t\t// introduce a boundary nodes for all nonrelevant parents\n\t\t\t\tfor (const parentId of currentNode.parents) {\n\t\t\t\t\tif (!transitiveChildrenIds.has(parentId)) {\n\t\t\t\t\t\tconst boundaryNode = createBoundaryNode(dag.get(parentId));\n\t\t\t\t\t\t\n\t\t\t\t\t\t// boundaryNode has currentNode as child and is therefore no leaf\n\t\t\t\t\t\tassert(!dag.leaves.has(boundaryNode.id), \"invar violated. Boundary nodes should only occur as parents of nodes\");\n\t\t\t\t\t\tremainingNodes.set(boundaryNode.id, boundaryNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// otherwise ignore all parents: introduce a copy of the node which has no parents\n\t\t\t\tcurrentNode = createBoundaryNode(currentNode);\n\t\t\t}\n\n\t\t\t// add currentNode to remainingNodes\n\t\t\tremainingNodes.set(currentNode.id, currentNode);\n\t\t} \n\t}\n\n\t// create deep copy of nodes\n\t// needed so that layout computation for the transformed dag does not overwrite the layout of the original dag\n\tconst remainingNodesDeepCopy = new Map<number, SatNode>();\n\tfor (const [nodeId,node] of remainingNodes) {\n\t\tremainingNodesDeepCopy.set(nodeId, node.copy());\n\t}\n\treturn new Dag(remainingNodesDeepCopy);\n}\n\nfunction createBoundaryNode(node: SatNode): SatNode {\n\treturn new SatNode(node.id, node.unit, node.inferenceRule, [], node.statistics, node.isFromPreprocessing, node.newTime, node.activeTime, node.deletionTime, node.deletionParents, node.isBoundary);\n}\n\n// vampire performs preprocessing in multiple steps\n// we are only interested in\n// 1) the input-formulas (and axioms added by Vampire)\n// 2) the clauses resulting from them\n// We therefore merge together all preprocessing steps into single steps\n// from input-formulas/vapire-added-axioms to final-preprocessing-clauses\n// additionally remove all choice axiom parents, since we treat them as part of the background theory\nexport function mergePreprocessing(dag: Dag): Dag {\n\tconst nodes = new Map<number, SatNode>(dag.nodes);\n\tconst nodeIdsToRemove = new Set<number>(); // nodes which should be removed. note that we can't remove them upfront due to the fact that the derivation is a dag and not a tree\n\tconst mergeMap = new Map<number, Array<number>>(); // maps merged nodes to the replacing nodes, needed for extending the dag later\n\n\tconst postOrderTraversal = new DFPostOrderTraversal(dag);\n\twhile (postOrderTraversal.hasNext()) {\n\t\t// note: the ids are still valid, but the nodes may have been replaced by new node\n\t\tconst currentNodeId = postOrderTraversal.getNext().id;\n\t\tconst currentNode = nodes.get(currentNodeId) as SatNode;\n\n\t\t// if there is a preprocessing node n1 with a parent node n2 which has itself a parent node n3,\n\t\t// then replace n2 by n3 in the parents of n1 and add n2 to the nodes which should be removed\n\t\tif (currentNode.isFromPreprocessing) {\n\t\t\tconst updatedParents = new Array<number>();\n\t\t\tfor (const parentId of currentNode.parents) {\n\t\t\t\tconst parentNode = nodes.get(parentId) as SatNode;\n\t\t\t\tassert(parentNode.isFromPreprocessing, \"invariant violated\");\n\n\t\t\t\tif (parentNode.parents.length === 0) {\n\t\t\t\t\t// small optimization: remove choice axioms, which should not been added to the proof by Vampire in the first place\n\t\t\t\t\tif (parentNode.inferenceRule === \"choice axiom\") {\n\t\t\t\t\t\tnodeIdsToRemove.add(parentId);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdatedParents.push(parentId);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const parent2Id of parentNode.parents) {\n\t\t\t\t\t\tconst parent2Node = nodes.get(parent2Id) as SatNode;\n\t\t\t\t\t\tassert(parent2Node.isFromPreprocessing, \"invariant violated\");\n\t\t\t\t\t\tupdatedParents.push(parent2Id);\n\t\t\t\t\t}\n\t\t\t\t\tnodeIdsToRemove.add(parentId);\n\t\t\t\t\tmergeMap.set(parentId, parentNode.parents);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst updatedNode = new SatNode(currentNode.id, currentNode.unit, currentNode.inferenceRule, updatedParents, currentNode.statistics, currentNode.isFromPreprocessing, currentNode.newTime, currentNode.activeTime, currentNode.deletionTime, currentNode.deletionParents, currentNode.isBoundary);\n\t\t\tnodes.set(currentNodeId, updatedNode);\n\t\t}\n\t}\n\n\t// remove merged nodes\n\tfor (const nodeIdToRemove of nodeIdsToRemove) {\n\t\tconst success = nodes.delete(nodeIdToRemove);\n\t\tassert(success, \"invar violated\");\n\t}\n\n\treturn new Dag(nodes, mergeMap);\n}\n\n// preconditions:\n// - selectionIds contains only ids from nodes which either 1) have already been activated or 2) are final preprocessing clauses\n// - selectionIds must contain at least one element\nexport function passiveDagForSelection(dag: Dag, selectionIds: Array<number>, currentTime: number): Dag {\n\tassert(selectionIds.length > 0);\n\tconst selectionIdsSet = new Set(selectionIds);\n\n\t// Part 1: for each passive node n, we consider the transitive parents p_1,...p_k occuring in the activeDag, \n\t// such that for each parent p_i no other node inbetween n and p_i occurs in the activeDag. If selectionId \n\t// is a subset of {p_1,...,p_k}, then n is added to foundNodes\n\tconst foundNodes = new Set<number>();\n\n\tconst idToActiveDagParents = new Map<number, Set<number>>();\n\tconst iterator = new DFPostOrderTraversal(dag);\n\twhile (iterator.hasNext()) {\n\t\tconst node = iterator.getNext();\n\t\tconst nodeId = node.id;\n\n\t\tconst activeDagParents = new Set<number>();\n\n\t\tconst nodeIsInActiveDag = ((node.activeTime !== null && node.activeTime <= currentTime) || node.isFromPreprocessing);\n\t\tif(nodeIsInActiveDag) {\n\t\t\tif (selectionIdsSet.has(nodeId)) {\n\t\t\t\tactiveDagParents.add(nodeId);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (const parentId of node.parents) {\n\t\t\t\tconst activeDagParentsParent = idToActiveDagParents.get(parentId);\n\t\t\t\tassert(activeDagParentsParent !== undefined);\n\t\t\t\tfor (const activeDagParent of activeDagParentsParent!) {\n\t\t\t\t\tactiveDagParents.add(activeDagParent);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if node is passive and each clause from selection occurs in activeDagParents, then add node to foundNodes\n\t\t\tconst nodeIsInPassive = ((node.newTime !== null && node.newTime <= currentTime) && !(node.activeTime !== null && node.activeTime <= currentTime) && !(node.deletionTime !== null && node.deletionTime <= currentTime));\n\t\t\tif (nodeIsInPassive) {\n\t\t\t\tif (activeDagParents.size === selectionIdsSet.size) {\n\t\t\t\t\tfoundNodes.add(nodeId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tidToActiveDagParents.set(nodeId, activeDagParents);\n\t}\n\t\n\t// Part 2:\n\t// we now know the set of passive nodes, so\n\t// - collect all nodes participating in the derivation of the passive nodes from nodes in the current activeDag\n\t// - compute for each such node its style\n\tconst passiveDagNodes = new Map<number, SatNode>();\n\tconst nodePartition = new Map<number, SatNodeStyle>();\n\n\tconst relevantNodes = new Set<number>(foundNodes);\n\n\t// additionally display each node from selection, even if no passive node is generated by the node\n\tfor (const nodeId of selectionIds) {\n\t\trelevantNodes.add(nodeId);\n\t}\n\n\tconst iterator2 = new ReversePostOrderTraversal(dag);\n\twhile (iterator2.hasNext()) {\n\t\tconst node = iterator2.getNext();\n\t\tconst nodeId = node.id;\n\n\t\tif (relevantNodes.has(nodeId)) {\n\t\t\tconst isDeleted = (node.deletionTime !== null && node.deletionTime <= currentTime);\n\n\t\t\t// compute whether the derivation should be extended with the parents of the node, and compute the style of the node\n\t\t\tlet isBoundary;\n\t\t\tlet style;\n\t\t\tif (foundNodes.has(nodeId)) {\n\t\t\t\tassert(!isDeleted);\n\t\t\t\tif (node.isFromPreprocessing) {\n\t\t\t\t\tisBoundary = true;\n\t\t\t\t\tstyle = \"passive\";\n\t\t\t\t} else {\n\t\t\t\t\tisBoundary = false;\n\t\t\t\t\tstyle = \"passive\";\n\t\t\t\t}\n\t\t\t} else if (dag.nodeIsTheoryAxiom(nodeId)) {\n\t\t\t\tisBoundary = true;\n\t\t\t\tstyle = isDeleted ? \"theory-axiom-deleted\" : \"theory-axiom\";\n\t\t\t} else if (node.isFromPreprocessing) {\n\t\t\t\tif (node.inferenceRule === \"negated conjecture\") {\n\t\t\t\t\tisBoundary = true;\n\t\t\t\t\tstyle = \"conjecture\";\n\t\t\t\t} else {\n\t\t\t\t\tisBoundary = true;\n\t\t\t\t\tstyle = isDeleted ? \"preprocessing-deleted\" : \"preprocessing\";\n\t\t\t\t}\n\t\t\t} else if (node.activeTime !== null && node.activeTime <= currentTime) {\n\t\t\t\tisBoundary = true;\n\t\t\t\tstyle = isDeleted ? \"activated-deleted\" : \"activated\";\n\t\t\t} else {\n\t\t\t\tisBoundary = false;\n\t\t\t\tstyle = \"deleted\";\n\t\t\t}\n\n\t\t\tif (isBoundary) {\n\t\t\t\tpassiveDagNodes.set(nodeId, createBoundaryNode(node));\n\t\t\t} else {\n\t\t\t\tpassiveDagNodes.set(nodeId, node.copy()); // copy node so that positioning passiveDag will not change positioning of original dag\n\t\t\t\tfor (const parent of node.parents) {\n\t\t\t\t\trelevantNodes.add(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnodePartition.set(nodeId, style);\n\t\t}\n\t}\n\n\tconst passiveDag = new Dag(passiveDagNodes, null, true, nodePartition, selectionIds[0]);\n\treturn passiveDag;\n}\n\n  // returns null if node was not derived using simplification\n  // returns id of original node if node was derived using simplification\n  // TODO: we don't know the complete set of simplifying inference rules, since the current set could be extended in the future. Nonetheless we know the standard simplifying and generating inference rules, so we could use that knowledge to speed up the computation of this function.\n  function nodeWasDerivedUsingSimplification(dag: Dag, node: SatNode): SatNode | null {\n    // one of the parents p of node n needs to satisfy the following four properties (independently from the currentTime):\n    for (const parentId of node.parents) {\n      const parent = dag.get(parentId);\n      // 1) n has been added to saturation and p has been deleted\n      // 2) the deletionTime of p matches the newTime of n.\n      // 3) the first deletion parent of p is n\n      // 4) let P be the set of parents of n other than p. Then the deletion parents of p are n and P.\n      if (node.newTime !== null && parent.deletionTime !== null && parent.deletionTime === node.newTime && parent.deletionParents[0] === node.id && node.parents.length === parent.deletionParents.length) {\n        const set1 = new Set<number>(node.parents);\n        set1.delete(parentId);\n        const set2 = new Set<number>(parent.deletionParents);\n        set2.delete(parent.deletionParents[0]);\n        let otherParentsMatch = true;\n        for (const e of set1) {\n          if (!set2.has(e)) {\n            otherParentsMatch = false;\n          }\n        }\n        if (otherParentsMatch) {\n          return parent;\n        }\n      }\n    }\n    return null;\n  }","import Viz from 'viz.js';\nimport {Module, render} from 'viz.js/full.render.js';\n\nexport async function runViz(dotString) {\n\tlet viz = new Viz({Module, render});\n\n\treturn viz\n\t\t.renderString(dotString, {format: 'plain'})\n\t\t.then((result) => {\n\t\treturn result;\n\t\t})\n\t\t.catch((error) => {\n\t\tviz = new Viz({Module, render});\n\t\tconsole.error(error);\n\t\t});\n};","import { assert } from '../model/util';\nimport { Dag } from '../model/dag';\nimport { runViz } from './callViz';\nimport SatNode from './sat-node';\n\nconst PLAIN_PATTERN = /^(\\d+) ([0-9.]+) ([0-9.]+).*$/g;\n\nexport class VizWrapper {\n\n  // first computes the positions for the nodes while ignoring the position given as parameter.\n  // then, all node positions are shifted by the same amount so that one of the nodes \n  // occurs closely under the position given as parameter\n  static async layoutNodesAtPosition(nodes: Map<number, SatNode>, position: [number, number]) {\n    // 1) layout new nodes while ignoring existing nodes\n    await VizWrapper.layoutNodes(nodes);\n\n    // 2) find a source node of the dag of newly generated nodes\n    let sourceNode: SatNode | null = null;\n    for (const node of nodes.values()) {\n      let isSourceNode = true;\n      for (const parentId of node.parents) {\n        if (nodes.has(parentId)) {\n          isSourceNode = false;\n          break;\n        }\n      }\n      if (isSourceNode) {\n        sourceNode = node;\n        break;\n      }\n    }\n    assert(sourceNode !== null);\n    assert((sourceNode as SatNode).position !== null);\n\n    // 3) shift subgraph of newly generated nodes, so that the source node of the subgraph\n    //    is shifted to a position closely under the position indicated by the positioning hint.\n    const [posSelectedX, posSelectedY] = position;\n    const [posSourceX, posSourceY] = (sourceNode as SatNode).position as [number, number];\n    const deltaX = posSelectedX-posSourceX;\n    const deltaY = (posSelectedY - posSourceY) - 1;\n    for (const node of nodes.values()) {\n      assert(node.position != null);\n      const position = node.position as [number, number];\n      node.position = [position[0] + deltaX, position[1] + deltaY];\n    }\n  }\n\n  static async layoutDag(dag: Dag, onlyActiveDag: boolean) {\n    // generate dot string\n    const dotString = VizWrapper.dagToDotString(dag, onlyActiveDag);\n    \n    // use viz to compute layout for dag given as dotstring\n    // note that viz returns the layout as a string\n    const layoutString = await runViz(dotString);\n\n    // parse the layout string into array of network-nodes\n    VizWrapper.parseLayoutString(layoutString, dag.nodes);\n  };\n\n  static async layoutNodes(nodes: Map<number, SatNode>) {\n    // generate dot string\n    const dotString = VizWrapper.nodesToDotString(nodes);\n\n    // use viz to compute layout for nodes given as dotstring\n    // note that viz returns the layout as a string\n    const layoutString = await runViz(dotString);\n\n    // parse the layout string into array of network-nodes\n    VizWrapper.parseLayoutString(layoutString, nodes);\n  }\n\n  // encodes layout-problem into dot-language\n  // the solution to the layout-problem contains a position for each node, which either\n  // - is a preprocessing node\n  // - occurs in the derivation of at least one activated clause\n  static dagToDotString(dag: Dag, onlyActiveDag: boolean): string {\n    const nodesInActiveDag = onlyActiveDag ? dag.computeNodesInActiveDag(Number.MAX_SAFE_INTEGER) : null;\n\n    const inputStrings = new Array<string>();\n    const preprocessingStrings = new Array<string>();\n    const otherStrings = new Array<string>();    \n    for (const node of dag.nodes.values()) {\n      assert(node.position === null, \"the dag has already been layouted!\");\n      if (node.isFromPreprocessing) {\n        if(dag.nodeIsInputNode(node.id)) {\n          inputStrings.push(`${node.id} [label=\"${node.toString()}\"]`);\n        } else {\n          preprocessingStrings.push(`${node.id} [label=\"${node.toString()}\"]`);\n        }\n      } else  {\n        if (!onlyActiveDag || (nodesInActiveDag as Set<number>).has(node.id)) {\n          otherStrings.push(`${node.id} [label=\"${node.toString()}\"]`);\n        }\n      }\n    }\n\n    const edgeStrings = new Array<string>();\n    for (const node of dag.nodes.values()) {\n      if (!onlyActiveDag || (nodesInActiveDag as Set<number>).has(node.id)) {\n        for (const parentId of node.parents) {\n          edgeStrings.push(`${parentId} -> ${node.id}`)\n        }\n      }\n    }\n\n    const inputString = \"   subgraph inputgraph {\\n      rank=source;\\n      \" + inputStrings.join(\";\\n      \") + \"\\n   }\";\n    const preprocessingString = \"   subgraph preprocessinggraph {\\n      rank=same;\\n      \" + preprocessingStrings.join(\";\\n      \") + \"\\n   }\";\n    const otherstring = \"   subgraph othergraph {\\n      \" + otherStrings.join(\";\\n      \") + \"\\n   }\";\n    const edgeString = edgeStrings.join(\";\\n   \");\n\n    const dotString =  \"digraph {\\n\\n\" + inputString + \"\\n\\n\" + preprocessingString + \"\\n\\n\" + otherstring + \"\\n\\n   \" + edgeString + \"\\n}\";\n    \n    return dotString;\n  };\n\n  static nodesToDotString(nodes: Map<number, SatNode>): string {\n    const nodeStrings = new Array<string>();\n    for (const node of nodes.values()) {\n      assert(node.position === null, \"the node has already been layouted!\");\n      nodeStrings.push(`${node.id} [label=\"${node.toString()}\"]`);\n    }\n\n    const edgeStrings = new Array<string>();\n    for (const node of nodes.values()) {\n      for (const parentId of node.parents) {\n        if (nodes.has(parentId)) {\n          edgeStrings.push(`${parentId} -> ${node.id}`)\n        }\n      }\n    }\n\n    const dotString =  \"digraph {\\n   \" + nodeStrings.join(\";\\n   \") + \"\\n\\n   \" + edgeStrings.join(\";\\n   \") + \"\\n}\";\n    return dotString;\n  };\n\n  static parseLayoutString(layoutString: string, nodes: Map<number, SatNode>) {\n    let firstEdgeLineIndex = layoutString.includes('\\nedge') ? layoutString.indexOf('\\nedge') : layoutString.length;\n    // split layoutString to array of strings describing positions of nodes\n    const parsedNodeLines = layoutString\n      .substr(0, firstEdgeLineIndex) // ignore remaining part of string describing edges\n      .split('\\nnode ') //split lines\n      .slice(1) // ignore first line describing graph\n      .map(line => line.substr(0, line.indexOf('\"'))) // ignore remaining part of line causing problems with line breaks\n      .map((line) => line.matchAll(PLAIN_PATTERN).next().value); // parse each remaining line\n    parsedNodeLines.forEach(line => {\n      assert(line !== undefined); // check that each remaining line was successfully parsed\n\t  });\n\t\n    // update SatNode for each nodeString\n    for (const parsedNodeLine of parsedNodeLines) {\n      const [, idString, xString, yString] = parsedNodeLine;\n      const id = parseInt(idString, 10);\n      const x = parseFloat(xString);\n      const y = parseFloat(yString);\n      const node = nodes.get(id) as SatNode;\n      node.position = [x,y];\n    }\n  }\n}","import * as React from 'react';\nimport ReactModal from 'react-modal';\nReactModal.setAppElement('#root');\n\nimport Graph from './Graph'\nimport { Dag } from '../model/dag';\nimport { assert } from '../model/util';\nimport { PassiveDagAside } from './PassiveDagAside';\nimport { Literal } from '../model/literal';\n\nimport { passiveDagForSelection } from '../model/transformations';\nimport { VizWrapper } from '../model/viz-wrapper';\n\ntype Props = {\n\tdag: Dag,\n\tnodeSelection: number[],\n  currentTime: number,\n\t\n\tchangedNodesEvent?: Set<number>,\n  infoToggle: boolean,\n  editToggle: boolean,\n  onLiteralOrientationChange: (nodeId: number, oldPosition: [\"premise\" | \"conclusion\" | \"context\", number], newPosition: [\"premise\" | \"conclusion\" | \"context\", number]) => void,\n  onLiteralRepresentationChange: (nodeId: number, literal: Literal) => void\n\n\tonDismissPassiveDag: (selectedId: number | null, positioningHint: [number, number] | null) => void,\n  onToggleInfo: () => void,\n  onToggleEdit: () => void\n};\n\ntype State = {\n\tpassiveDag: Dag | null;\n  nodeSelectionPassiveDag: number[],\n}\n\nexport class PassiveDagModal extends React.Component<Props, State> {\n\t\n\tstate: State = {\n\t\tpassiveDag: null,\n\t\tnodeSelectionPassiveDag: []\n  }\n\n  async componentDidMount() {\n    const passiveDag = await this.generatePassiveDag();\n    this.setState({\n      passiveDag: passiveDag\n    });\n  }\n\n  async componentDidUpdate(previousProps) {\n\t\tif (this.props.dag !== previousProps.dag || this.props.nodeSelection !== previousProps.nodeSelection || this.props.currentTime !== previousProps.currentTime) {\n\t\t\tconst passiveDag = await this.generatePassiveDag();\n\t\t\tthis.setState({\n\t\t\t\tpassiveDag: passiveDag\n\t\t\t});\n\t\t}\n  }\n\n\trender() {\n\t\tif (this.state.passiveDag === null) {\n\t\t\treturn (\n\t\t\t\t<section>Layouting...</section>\n\t\t\t)\n\t\t}\n\n\t\treturn (\n\t\t\t<ReactModal\n\t\t\t\tisOpen={true}\n\t\t\t\tcontentLabel={`Clauses currently in Passive generated by clause with id ${this.state.passiveDag!.activeNodeId!}`}\n\t\t\t\tonRequestClose={() => {\n\t\t\t\t\tthis.props.onDismissPassiveDag(null, null);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Graph\n\t\t\t\t\tdag={this.state.passiveDag!}\n\t\t\t\t\tnodeSelection={this.state.nodeSelectionPassiveDag}\n\t\t\t\t\tchangedNodesEvent={this.props.changedNodesEvent}\n\t\t\t\t\tcurrentTime={this.props.currentTime}\n\t\t\t\t\tanimateDagChanges={false}\n\t\t\t\t\tonNodeSelectionChange={this.nodeSelectionChange.bind(this)}\n\t\t\t\t\tonUpdateNodePositions={this.updateNodePositions.bind(this)}\n\t\t\t\t/>\n\t\t\t\t<PassiveDagAside\n\t\t\t\t\tdag={this.state.passiveDag!}\n\t\t\t\t\tcurrentTime={this.props.currentTime}\n\t\t\t\t\tnodeSelection={this.state.nodeSelectionPassiveDag}\n          infoToggle={this.props.infoToggle}\n          editToggle={this.props.editToggle}\n\t\t\t\t\tonUpdateNodeSelection={this.nodeSelectionChange.bind(this)}\n\t\t\t\t\tonLiteralOrientationChange={this.props.onLiteralOrientationChange}\n\t\t\t\t\tonLiteralRepresentationChange={this.props.onLiteralRepresentationChange}\n\t\t\t\t\tonSelectButtonPressed={this.selectButtonPressed.bind(this)}\n          onToggleInfo={this.props.onToggleInfo}\n          onToggleEdit={this.props.onToggleEdit}\n\t\t\t\t/>\n\t\t\t</ReactModal>\n\t\t)\n\t}\t\n\n\tnodeSelectionChange(selection: number[]) {\n\t\tthis.setState({nodeSelectionPassiveDag: selection});\n\t}\n\n\tupdateNodePositions(nodeIds: number[], delta: [number, number]) {\n\t\tassert(this.state.passiveDag !== null);\n    for (const nodeId of nodeIds) {\n      const node = this.state.passiveDag!.get(nodeId);\n      assert(node.position !== null);\n      node.position = [node.position![0] + delta[0], node.position![1] + delta[1]];\n    }\n\t}\n\n\tasync generatePassiveDag() {\n\t\t// generate passive dag\n\t\tconst passiveDag = passiveDagForSelection(this.props.dag, this.props.nodeSelection, this.props.currentTime);\n\n\t\t// layout node positions of passive dag\n\t\tawait VizWrapper.layoutDag(passiveDag, false);\n\n\t\t// shift dag so that selected node occurs at same screen position as in currentDag\n\t\tconst [posCurrentX, posCurrentY] = this.props.dag.get(this.props.nodeSelection[0]).getPosition();\n\t\tconst [posPassiveX, posPassiveY] = passiveDag.get(this.props.nodeSelection[0]).getPosition();\n\t\tconst deltaX = posCurrentX-posPassiveX;\n\t\tconst deltaY = posCurrentY-posPassiveY;\n\t\tfor (const [nodeId, node] of passiveDag.nodes) {\n\t\t\tassert(node.position != null);\n\t\t\tconst position = node.position as [number, number];\n\t\t\tnode.position = [position[0] + deltaX, position[1] + deltaY];\n\t\t}\n\n\t\treturn passiveDag;\n\t}\n\n\tselectButtonPressed() {\n\t\tconst passiveDag = this.state.passiveDag;\n\t\tassert(passiveDag !== null);\n\t\tassert(passiveDag!.isPassiveDag);\n\t\tassert(passiveDag!.activeNodeId !== null);\n\t\t\n\t\tassert(this.state.nodeSelectionPassiveDag.length === 1);\n\t\tconst selectedId = this.state.nodeSelectionPassiveDag[0];\n\t\tassert(selectedId !== null);\n\n\t\tconst styleMap = passiveDag!.styleMap!\n\t\tassert(styleMap !== null);\n    assert(styleMap.get(selectedId) === \"passive\");\n\t\t\n\t\t// compute positioning hint\n\t\tconst positioningHint = this.props.dag.get(this.state.passiveDag!.activeNodeId as number).position;\n\t\tassert(positioningHint !== null);\n\n\t\tthis.props.onDismissPassiveDag(selectedId, positioningHint!);\n\t}\n\n}\n","import * as React from 'react';\n\nimport { Dag } from '../model/dag';\nimport {Literal} from '../model/literal'\nimport Slider from './Slider';\nimport Graph from './Graph';\nimport { PassiveDagModal } from './PassiveDagModal';\n\n\ntype Props = {\n  dag: Dag,\n  showPassiveDag: boolean,\n  nodeSelection: number[],\n  changedNodesEvent?: Set<number>,\n  historyLength: number,\n  currentTime: number,\n  animateDagChanges: boolean,\n  infoToggle: boolean,\n  editToggle: boolean,\n  onNodeSelectionChange: (selection: number[]) => void,\n  onCurrentTimeChange: (newState: number) => void,\n  onDismissPassiveDag: (selectedId: number | null, positioningHint: [number, number] | null) => void,\n  onUpdateNodePositions: (nodeIds: Array<number>, delta: [number, number]) => void,\n  onLiteralOrientationChange: (nodeId: number, oldPosition: [\"premise\" | \"conclusion\" | \"context\", number], newPosition: [\"premise\" | \"conclusion\" | \"context\", number]) => void,\n  onLiteralRepresentationChange: (nodeId: number, literal: Literal) => void,\n  onToggleInfo: () => void,\n  onToggleEdit: () => void\n};\n\nexport default class Main extends React.Component<Props, {}> {\n\n  render() {\n    let modal;\n    if (this.props.showPassiveDag) {\n      modal = \n        <PassiveDagModal\n          dag={this.props.dag}\n          nodeSelection={this.props.nodeSelection}\n          currentTime={this.props.currentTime}\n          changedNodesEvent={this.props.changedNodesEvent}\n          infoToggle={this.props.infoToggle}\n          editToggle={this.props.editToggle}\n          onLiteralOrientationChange={this.props.onLiteralOrientationChange}\n          onLiteralRepresentationChange={this.props.onLiteralRepresentationChange}\n          onDismissPassiveDag={this.props.onDismissPassiveDag}\n          onToggleInfo={this.props.onToggleInfo}\n          onToggleEdit={this.props.onToggleEdit}\n        />\n    }\n\n    return (\n      <main>\n        <Graph\n          dag={this.props.dag}\n          nodeSelection={this.props.nodeSelection}\n          changedNodesEvent={this.props.changedNodesEvent}\n          currentTime={this.props.currentTime}\n          animateDagChanges={this.props.animateDagChanges}\n          onNodeSelectionChange={this.props.onNodeSelectionChange}\n          onUpdateNodePositions={this.props.onUpdateNodePositions}\n        />\n        {modal}\n        <Slider\n          historyLength={this.props.historyLength}\n          currentTime={this.props.currentTime}\n          onCurrentTimeChange={this.props.onCurrentTimeChange}\n        />\n      </main>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport './GraphMenu.css';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  undoEnabled: boolean,\n  filterUpEnabled: boolean,\n  filterDownEnabled: boolean,\n  passiveDagButtonEnabled: boolean,\n  onUndo: () => void,\n  onRenderParentsOnly: () => void,\n  onRenderChildrenOnly: () => void,\n  onShowPassiveDag: () => void\n};\n\nexport default class GraphMenu extends React.Component<Props, {}> {\n\n  render() {\n    return (\n      <div className=\"component-graph-menu\">\n        <section className=\"component-graph-menu-content\">\n          <button title=\"Undo last graph transformation\" disabled={!this.props.undoEnabled} onClick={this.props.onUndo}>\n            <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n              <use xlinkHref={`${icons}#graph-undo`}/>\n            </svg>\n          </button>\n\n          <button title=\"Render selection only (up)\" disabled={!this.props.filterUpEnabled}\n                  onClick={this.props.onRenderParentsOnly}>\n            <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n              <use xlinkHref={`${icons}#graph-up`}/>\n            </svg>\n          </button>\n\n          <button title=\"Render selection only (down)\" disabled={!this.props.filterDownEnabled}\n                  onClick={this.props.onRenderChildrenOnly}>\n            <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n              <use xlinkHref={`${icons}#graph-down`}/>\n            </svg>\n          </button>\n\n          <button title=\"Select clauses\"\n                  disabled={!this.props.passiveDagButtonEnabled}\n                  onClick={() => {\n                    this.props.onShowPassiveDag();\n                  }}>\n            <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n              <use xlinkHref={`${icons}#graph-s`}/>\n            </svg>\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\n\nimport './NodeMenu.css';\n\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  nodeSelection: number[],\n  onSelectParents: () => void,\n  onSelectChildren: () => void,\n  onSelectCommonConsequences: () => void\n};\nexport default class NodeMenu extends React.Component<Props, {}> {\n\n  render() {\n    return (\n      <section className=\"component-node-menu\">\n\n        <button\n          title=\"Select parents of selected nodes\"\n          disabled={!this.props.nodeSelection.length}\n          onClick={this.props.onSelectParents}\n        >\n          <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n            <use xlinkHref={`${icons}#node-parents`}/>\n          </svg>\n        </button>\n\n        <button\n          title=\"Select children of selected nodes\"\n          disabled={!this.props.nodeSelection.length}\n          onClick={this.props.onSelectChildren}\n        >\n          <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n            <use xlinkHref={`${icons}#node-children`}/>\n          </svg>\n        </button>\n\n        <button\n          title=\"Find common consequences of selected nodes\"\n          disabled={this.props.nodeSelection.length < 2}\n          onClick={this.props.onSelectCommonConsequences}\n        >\n          <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n            <use xlinkHref={`${icons}#node-consequences`}/>\n          </svg>\n        </button>\n\n      </section>\n    );\n  }\n\n}\n","import * as React from 'react';\n\nimport { Dag } from '../model/dag';\nimport './Search.css';\nimport SatNode from '../model/sat-node';\nimport { assert } from '../model/util';\nimport { Clause } from '../model/unit';\n\n\ntype Props = {\n  dag: Dag | null,\n  currentTime: number,\n  onUpdateNodeSelection: (selection: number[]) => void\n};\ntype State = {\n  foundNodes: Array<SatNode>\n};\n\nexport default class Search extends React.Component<Props, State> {\n\n  state = {\n    foundNodes: []\n  };\n  private searchField1 = React.createRef<HTMLInputElement>();\n  private searchField2 = React.createRef<HTMLInputElement>();\n  private searchField3 = React.createRef<HTMLInputElement>();\n\n  componentDidUpdate(prevProps) {\n    if (this.props.dag !== prevProps.dag || this.props.currentTime !== prevProps.currentTime) {\n      this.searchField1.current!.value = \"\";\n      this.searchField2.current!.value = \"\";\n      this.searchField3.current!.value = \"\";\n\n      this.setState({foundNodes: []});\n    }\n  }\n\n  render() {\n    const {foundNodes} = this.state;\n\n    return (\n      <section className=\"component-search\">\n        <input\n          type=\"text\"\n          ref={this.searchField1}\n          placeholder=\"Search for nodes including literal\"\n          onKeyUp={this.search.bind(this)}\n          disabled={this.props.dag === null}\n        />\n        <input\n          type=\"text\"\n          ref={this.searchField2}\n          placeholder=\"Search for nodes excluding literals\"\n          onKeyUp={this.search.bind(this)}\n          disabled={this.props.dag === null}\n        />\n        <input\n          type=\"text\"\n          ref={this.searchField3}\n          placeholder=\"Search for nodes using inference rule\"\n          onKeyUp={this.search.bind(this)}\n          disabled={this.props.dag === null}\n        />\n        <ul id=\"searchResults\">\n          {\n            foundNodes.slice(0, 21).map(node => this.toListItem(node))\n          }\n          {\n            foundNodes.length > 20 && this.getDisabledListItem()\n          }\n        </ul>\n      </section>\n    );\n  }\n\n\n  // SEARCH ////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  search() {\n    assert(this.props.dag !== null);\n\n    assert(this.searchField1.current!);\n    assert(this.searchField2.current!);\n    assert(this.searchField3.current!);\n    const searchString1 = this.searchField1.current!.value;\n    const searchString2 = this.searchField2.current!.value;\n    const searchString3 = this.searchField3.current!.value;\n\n    // only perform search if at least one search string is non-empty\n    if (searchString1 === \"\" && searchString2 === \"\" && searchString3 === \"\") {\n      this.props.onUpdateNodeSelection([]);\n      this.setState({\n        foundNodes: []\n      });\n      return;\n    }\n\n    let candidates = Array.from(this.props.dag!.nodes.values());\n\n    // find all clauses which contain a literal which matches the first search string\n    if (searchString1 !== \"\") {\n      const foundNodes = new Array<SatNode>();\n  \n      for (const node of candidates) {\n        if (node.unit.type === \"Clause\") {\n          const clause = node.unit as Clause;\n        \n          let foundLiteral = false;\n          for (const literal of clause.premiseLiterals) {\n            if(literal.toString(true).includes(searchString1)) {\n              foundLiteral = true;\n              break;\n            }\n          }\n          if (!foundLiteral) {\n            for (const literal of clause.conclusionLiterals) {\n              if(literal.toString(false).includes(searchString1)) {\n                foundLiteral = true;\n                break;\n              }\n            }\n          }\n          if (!foundLiteral) {\n            for (const literal of clause.contextLiterals) {\n              if(literal.toString(false).includes(searchString1)) {\n                foundLiteral = true;\n                break;\n              }\n            }\n          }\n          if(foundLiteral) {\n            foundNodes.push(node);\n          }\n        }\n      }\n      candidates = foundNodes;\n    }\n\n    // find all clauses which don't contain a literal which matches the second search string\n    if (searchString2 !== \"\") {\n      const foundNodes = new Array<SatNode>();\n  \n      for (const node of candidates) {\n        if (node.unit.type === \"Clause\") {\n          const clause = node.unit as Clause;\n        \n          let foundLiteral = false;\n          for (const literal of clause.premiseLiterals) {\n            if(literal.toString(true).includes(searchString2)) {\n              foundLiteral = true;\n              break;\n            }\n          }\n          if (!foundLiteral) {\n            for (const literal of clause.conclusionLiterals) {\n              if(literal.toString(false).includes(searchString2)) {\n                foundLiteral = true;\n                break;\n              }\n            }\n          }\n          if (!foundLiteral) {\n            for (const literal of clause.contextLiterals) {\n              if(literal.toString(false).includes(searchString2)) {\n                foundLiteral = true;\n                break;\n              }\n            }\n          }\n\n          if(!foundLiteral) {\n            foundNodes.push(node);\n          }\n        }\n      }\n      candidates = foundNodes;\n    }\n\n    // find all clauses which have been derived using an inference rule which matches the third search string\n    if (searchString3 !== \"\") {\n      const foundNodes = new Array<SatNode>();\n  \n      for (const node of candidates) {\n        // note: using an exact check here instead of includes check\n        // e.g. so that \"resolution\" does not match \"subsumption resolution\"\n        if (node.inferenceRule === searchString3) {\n          foundNodes.push(node);\n        }\n      }\n      candidates = foundNodes;\n    }\n\n    const nodesInActiveDag = this.props.dag!.computeNodesInActiveDag(this.props.currentTime);\n    const foundNodes = new Array<SatNode>();\n    for (const node of candidates) {\n      if (nodesInActiveDag.has(node.id)) {\n        foundNodes.push(node);\n      }\n    }\n    candidates = foundNodes;\n\n    // order found clauses by length\n    candidates.sort((node1: SatNode, node2: SatNode) => {\n      const clause1 = node1.unit as Clause;\n      const clause2 = node2.unit as Clause;\n      return clause1.toString().length - clause2.toString().length\n    });\n\n    // select all found clauses\n    this.props.onUpdateNodeSelection(candidates.map(node => node.id));\n  \n    // present search results\n    this.setState({\n      foundNodes: candidates\n    });\n  }\n\n  toListItem = (node: SatNode) => {\n    return <li key={node.id} onClick={() => this.props.onUpdateNodeSelection([node.id])}>{node.toString()}</li>;\n  };\n\n  getDisabledListItem = () => {\n    return <li className=\"disabled-element\">...</li>;\n  };\n\n}\n","import * as React from 'react';\n\nimport { Dag } from '../model/dag';\nimport NodeMenu from './NodeMenu';\nimport Search from './Search';\nimport './NodeCard.css';\n\ntype Props = {\n  dag: Dag | null,\n  currentTime: number,\n  nodeSelection: number[],\n  onUpdateNodeSelection: (selection: number[]) => void,\n  onSelectParents: () => void,\n  onSelectChildren: () => void,\n  onSelectCommonConsequences: () => void\n};\nexport default class NodeCard extends React.Component<Props, {}> {\n\n  render() {\n    return (\n      <section className=\"component-node-card\">\n        <article>\n          <h2>Select Nodes</h2>\n          <NodeMenu\n            nodeSelection={this.props.nodeSelection}\n            onSelectParents={this.props.onSelectParents}\n            onSelectChildren={this.props.onSelectChildren}\n            onSelectCommonConsequences={this.props.onSelectCommonConsequences}\n          />\n          <Search\n            dag={this.props.dag}\n            currentTime={this.props.currentTime}\n            onUpdateNodeSelection={this.props.onUpdateNodeSelection}\n          />\n        </article>\n      </section>\n    );\n  }\n\n}\n","import * as React from 'react';\n\nimport GraphMenu from './GraphMenu';\nimport NodeCard from './NodeCard';\nimport {Dag} from '../model/dag';\nimport {Literal} from '../model/literal';\nimport {assert} from '../model/util';\nimport {NodeDetailsWrapper} from './NodeDetailsWrapper';\n\n\ntype Props = {\n  dag: Dag | null,\n  currentTime: number,\n  nodeSelection: number[],\n  multipleVersions: boolean,\n  infoToggle: boolean,\n  editToggle: boolean,\n  onUpdateNodeSelection: (selection: number[]) => void,\n  onUndo: () => void,\n  onRenderParentsOnly: () => void,\n  onRenderChildrenOnly: () => void,\n  onShowPassiveDag: () => void,\n  onSelectParents: () => void,\n  onSelectChildren: () => void,\n  onSelectCommonConsequences: () => void,\n  onLiteralOrientationChange: (nodeId: number, oldPosition: ['premise' | 'conclusion' | 'context', number], newPosition: ['premise' | 'conclusion' | 'context', number]) => void,\n  onLiteralRepresentationChange: (nodeId: number, literal: Literal) => void,\n  onToggleInfo: () => void,\n  onToggleEdit: () => void\n};\nexport default class Aside extends React.Component<Props, {}> {\n\n  render() {\n    if (this.props.dag === null) {\n      assert(this.props.nodeSelection.length === 0);\n      assert(!this.props.multipleVersions);\n    }\n\n    const passiveDagButtonEnabled = this.props.dag !== null && this.props.nodeSelection.length > 0;\n\n    return (\n      <div className=\"scroll\">\n        <aside>\n          <GraphMenu\n            undoEnabled={this.props.dag !== null && this.props.multipleVersions}\n            filterUpEnabled={this.props.dag !== null && this.props.nodeSelection.length > 0 && !this.props.dag!.isPassiveDag}\n            filterDownEnabled={this.props.dag !== null && this.props.nodeSelection.length > 0 && !this.props.dag!.isPassiveDag}\n            passiveDagButtonEnabled={passiveDagButtonEnabled}\n            onUndo={this.props.onUndo}\n            onRenderParentsOnly={this.props.onRenderParentsOnly}\n            onRenderChildrenOnly={this.props.onRenderChildrenOnly}\n            onShowPassiveDag={this.props.onShowPassiveDag}\n          />\n          <NodeCard\n            dag={this.props.dag}\n            currentTime={this.props.currentTime}\n            nodeSelection={this.props.nodeSelection}\n            onUpdateNodeSelection={this.props.onUpdateNodeSelection}\n            onSelectParents={this.props.onSelectParents}\n            onSelectChildren={this.props.onSelectChildren}\n            onSelectCommonConsequences={this.props.onSelectCommonConsequences}\n          />\n          <NodeDetailsWrapper\n            dag={this.props.dag}\n            nodeSelection={this.props.nodeSelection}\n            currentTime={this.props.currentTime}\n            infoToggle={this.props.infoToggle}\n            editToggle={this.props.editToggle}\n            onLiteralOrientationChange={this.props.onLiteralOrientationChange}\n            onLiteralRepresentationChange={this.props.onLiteralRepresentationChange}\n            onToggleInfo={this.props.onToggleInfo}\n            onToggleEdit={this.props.onToggleEdit}\n          />\n        </aside>\n      </div>\n    );\n  }\n\n}\n","import { Dag } from \"./dag\";\nimport { Clause } from \"./unit\";\nimport { Literal } from \"./literal\";\nimport { assert } from \"./util\";\nimport { literalsMatch } from \"./substitution\";\nimport { DFPostOrderTraversal } from \"./traversal\";\n\n// inferences, where\n// 1) clause and parent clause have same number of literals\n// 2) rewritten literals occur in the same position as the corresponding literal in the parent clause\nfunction computeParentLiteralsCase1(literals: Array<Literal>, parentLiterals: Array<Literal>) {\n\tassert(literals.length === parentLiterals.length);\n\n\tfor (let i = 0; i < literals.length; i++) {\n\t\tconst literal = literals[i];\n\t\tconst parentLiteral = parentLiterals[i];\n\t\t\n\t\tliteral.setLiteralInParent(parentLiteral);\n\t}\n}\n\n// inferences which remove exactly one literal, where the order of the remaining literals is not changed\n// need to find the position where the literals were removed\n// note: this may compute a wrong matching if a literal in the side-part of the clause matches a deleted literal\n//       in this case the wrongly matched literals in the parent are pairwise unifiable, so a sane user would assign to all of them the same orientation.\n//       in particular the wrong matching should not affect the orientation-heuristic in practice\nfunction computeParentLiteralsCase2(literals: Array<Literal>, parentLiterals: Array<Literal>, allowSubstitutions: boolean, allowMultipleRemovals: boolean) {\n\tassert(allowMultipleRemovals ? (literals.length < parentLiterals.length) : (literals.length + 1 === parentLiterals.length));\n\n\tlet foundRemovedLit = false;\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i < literals.length) {\n\t\tconst literal = literals[i];\n\t\tconst parentLiteral = parentLiterals[j];\n\n\t\tconst success = literalsMatch(literal, parentLiteral, allowSubstitutions);\n\n\t\tif (success) {\n\t\t\tliteral.setLiteralInParent(parentLiteral);\n\t\t\ti = i + 1;\n\t\t\tj = j + 1;\n\t\t} else {\n\t\t\tassert(!foundRemovedLit || allowMultipleRemovals, `case 2 error:\\n${literals.toString()}\\n${parentLiterals.toString()}`);\n\t\t\tfoundRemovedLit = true;\n\t\t\tj = j + 1;\n\t\t}\n\t}\n}\n\n// inferences, which rewrite exactly one literal, and shift that literal to the first position in literals\n// need to find the position where the literal was rewritten\n// note: this may compute a wrong matching if a literal in the side-part of the clause matches the rewritten literal in the parent\n//       in this case the wrongly matched literals in the parent are pairwise unifiable, so a sane user would assign to all of them the same orientation.\n//       in particular the wrong matching should not affect the orientation-heuristic in practice\nfunction computeParentLiteralsCase3(literals: Array<Literal>, parentLiterals: Array<Literal>, allowSubstitutions: boolean) {\n\tassert(literals.length === parentLiterals.length);\n\n\tlet foundRewrittenLiteral = false;\n\tlet i = 1;\n\t// first shifted matchings can occur\n\twhile(i < literals.length) {\n\t\tconst literal = literals[i];\n\t\tconst parentLiteral = parentLiterals[i - 1];\n\n\t\tif (literalsMatch(literal, parentLiteral, allowSubstitutions)) {\n\t\t\tliteral.setLiteralInParent(parentLiteral);\n\t\t\ti = i + 1;\n\t\t} else {\n\t\t\t// shifted matching failed, so parentLiterals[i - 1] must be rewrittenLiteral\n\t\t\tliterals[0].setLiteralInParent(parentLiterals[i - 1]);\n\t\t\tfoundRewrittenLiteral = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\t// corner case where rewritten literal is last element of parent clause and therefore has no failing shifted matching\n\tif (!foundRewrittenLiteral) {\n\t\tassert(i === literals.length);\n\t\tliterals[0].setLiteralInParent(parentLiterals[parentLiterals.length - 1]);\n\t}\n\t// now nonshifted matchings can occur\n\twhile(i < literals.length) {\n\t\tconst literal = literals[i];\n\t\tconst parentLiteral = parentLiterals[i];\n\t\tassert(literalsMatch(literal, parentLiteral, allowSubstitutions));\n\t\tliteral.setLiteralInParent(parentLiteral);\n\t\ti = i + 1;\n\t}\n}\n\n\nexport function computeParentLiterals(dag: Dag) {\n\tfor (const node of dag.nodes.values()) {\n\t\tif (!node.isBoundary && node.unit.type === \"Clause\") {\n\t\t\tconst clause = node.unit as Clause;\n\n\t\t\tif (node.inferenceRule === \"evaluation\" ||\n\t\t\t\tnode.inferenceRule === \"forward subsumption demodulation\" ||\n\t\t\t\t(node.inferenceRule === \"term algebras injectivity\" && node.parents.length == 1) ||\n\t\t\t\tnode.inferenceRule === \"subsumption resolution\" ||\n\t\t\t\tnode.inferenceRule === \"equality resolution\" ||\n\t\t\t\tnode.inferenceRule === \"trivial inequality removal\" ||\n\t\t\t\tnode.inferenceRule === \"factoring\" ||\n\t\t\t\tnode.inferenceRule === \"duplicate literal removal\" ||\n\t\t\t\t(node.inferenceRule === \"term algebras distinctness\" && node.parents.length == 1) ||\n\t\t\t\tnode.inferenceRule === \"forward demodulation\" ||\n\t\t\t\tnode.inferenceRule === \"backward demodulation\" ||\n\t\t\t\tnode.inferenceRule === \"equality factoring\") {\n\t\t\t\tassert(node.parents.length > 0);\n\n\t\t\t\t// hack to deal with the inconsistent implementation of Vampire:\n\t\t\t\t// backward demodulation is the only simplifying inference where the main premise does not occur as first parent\n\t\t\t\tconst hasSwitchedParents = node.inferenceRule === \"backward demodulation\"\n\t\t\t\tconst parent = dag.get(node.parents[hasSwitchedParents ? 1 : 0]);\n\n\t\t\t\t// only compute literal matchings for clauses\n\t\t\t\tif (parent.unit.type === \"Clause\") {\n\t\t\t\t\tconst parentClause = parent.unit as Clause;\n\n\t\t\t\t\t// compute literal ordering at the timepoint where clause was generated\n\t\t\t\t\t// note that the active-event can change the order of literals (since at this point the selected literals are computed and shifted to the front)\n\t\t\t\t\tassert(node.newTime !== null);\n\t\t\t\t\tassert(parent.newTime !== null);\n\t\t\t\t\tconst parentWasAlreadyActivated = parent.activeTime !== null && parent.activeTime <= node.newTime!;\n\t\t\t\t\tconst parentLiterals = parentWasAlreadyActivated ? parentClause.literalsActiveEvent! : parentClause.literalsNewEvent!;\n\t\t\t\t\tconst literals = clause.literalsNewEvent!;\n\t\t\t\t\tassert(parentLiterals !== null);\n\t\t\t\t\tassert(literals !== null);\n\n\t\t\t\t\t// compute the literal-matchings\n\t\t\t\t\t// in full generality, this computation would be computationally expensive and a lot of implementation effort\n\t\t\t\t\t// instead, we hardcode computations of matchings for the most important inference rules implemented in Vampire, and don't compute matchings for other inferences\n\t\t\t\t\tif ((node.inferenceRule === \"evaluation\" && literals.length === parentLiterals.length) || \n\t\t\t\t\t\tnode.inferenceRule === \"forward subsumption demodulation\" ||\n\t\t\t\t\t\tnode.inferenceRule === \"term algebras injectivity\") {\n\n\t\t\t\t\t\tcomputeParentLiteralsCase1(literals, parentLiterals);\n\n\t\t\t\t\t} else if (node.inferenceRule === \"subsumption resolution\" || \n\t\t\t\t\t\tnode.inferenceRule === \"equality resolution\" || \n\t\t\t\t\t\tnode.inferenceRule === \"trivial inequality removal\" ||\n\t\t\t\t\t\tnode.inferenceRule === \"factoring\" ||\n\t\t\t\t\t\tnode.inferenceRule === \"duplicate literal removal\" ||\n\t\t\t\t\t\tnode.inferenceRule === \"term algebras distinctness\" ||\n\t\t\t\t\t\t(node.inferenceRule === \"evaluation\" && literals.length + 1 === parentLiterals.length)) {\n\n\t\t\t\t\t\tconst allowSubstitutions = node.inferenceRule === \"equality resolution\" || node.inferenceRule === \"factoring\";\n\t\t\t\t\t\tconst allowMultipleRemovals = node.inferenceRule === \"trivial inequality removal\" || node.inferenceRule === \"duplicate literal removal\";\n\t\t\t\t\t\tcomputeParentLiteralsCase2(literals, parentLiterals, allowSubstitutions, allowMultipleRemovals);\n\n\t\t\t\t\t} else if (node.inferenceRule === \"forward demodulation\" ||\n\t\t\t\t\t\tnode.inferenceRule === \"backward demodulation\" ||\n\t\t\t\t\t\tnode.inferenceRule === \"equality factoring\") {\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst allowSubstitutions = node.inferenceRule === \"equality factoring\";\n\t\t\t\t\t\tcomputeParentLiteralsCase3(literals, parentLiterals, allowSubstitutions);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (node.inferenceRule === \"resolution\" ||\n\t\t\t\tnode.inferenceRule === \"superposition\") {\n\t\t\t\tassert(node.parents.length == 2);\n\t\t\t\tconst leftNode = dag.get(node.parents[0]);\n\t\t\t\tconst rightNode = dag.get(node.parents[1]);\n\n\t\t\t\t// only compute literal matchings for clauses\n\t\t\t\tif (leftNode.unit.type === \"Clause\" && rightNode.unit.type === \"Clause\") {\n\t\t\t\t\tconst leftClause = leftNode.unit as Clause;\n\t\t\t\t\tconst rightClause = rightNode.unit as Clause;\n\n\t\t\t\t\t// compute literal ordering at the timepoint where clause was generated\n\t\t\t\t\t// note again that the active-event can change the order of literals (since at this point the selected literals are computed and shifted to the front)\n\t\t\t\t\tassert(node.newTime !== null);\n\t\t\t\t\tassert(leftNode.newTime !== null);\n\t\t\t\t\tassert(rightNode.newTime !== null);\n\t\t\t\t\tconst leftWasAlreadyActivated = leftNode.activeTime !== null && leftNode.activeTime <= node.newTime!;\n\t\t\t\t\tconst rightWasAlreadyActivated = rightNode.activeTime !== null && rightNode.activeTime <= node.newTime!;\n\t\t\t\t\tconst leftLiterals = leftWasAlreadyActivated ? leftClause.literalsActiveEvent! : leftClause.literalsNewEvent!;\n\t\t\t\t\tconst rightLiterals = rightWasAlreadyActivated ? rightClause.literalsActiveEvent! : rightClause.literalsNewEvent!;\n\t\t\t\t\tconst literals = clause.literalsNewEvent!;\n\t\t\t\t\tassert(leftLiterals !== null);\n\t\t\t\t\tassert(rightLiterals !== null);\n\t\t\t\t\tassert(literals !== null);\n\t\t\t\t\tassert(leftLiterals.length > 0);\n\t\t\t\t\tassert(rightLiterals.length > 0);\n\n\t\t\t\t\tif (node.inferenceRule === \"resolution\") {\n\t\t\t\t\t\tassert(literals.length + 2 === leftLiterals.length + rightLiterals.length);\n\n\t\t\t\t\t\t// compute matchings separately for literals coming from leftLiterals resp. rightLiterals\n\t\t\t\t\t\t// split denotes the first position in literals with a literal coming from rightLiterals\n\t\t\t\t\t\tconst split = leftLiterals.length - 1;\n\t\t\t\t\t\tcomputeParentLiteralsCase2(literals.slice(0, split), leftLiterals, true, false);\n\t\t\t\t\t\tcomputeParentLiteralsCase2(literals.slice(split, literals.length), rightLiterals, true, false);\n\n\t\t\t\t\t} else if (node.inferenceRule === \"superposition\") {\n\t\t\t\t\t\tassert(literals.length + 1 === leftLiterals.length + rightLiterals.length);\n\n\t\t\t\t\t\t// compute matchings separately for literals coming from leftLiterals resp. rightLiterals\n\t\t\t\t\t\t// split denotes the first position in literals with a literal coming from rightLiterals\n\t\t\t\t\t\tconst split = leftLiterals.length;\n\t\t\t\t\t\tcomputeParentLiteralsCase3(literals.slice(0, split), leftLiterals, true);\n\t\t\t\t\t\tcomputeParentLiteralsCase2(literals.slice(split, literals.length), rightLiterals, true, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n// update in the given dag:\n// - literal orientations\n// - literal representations\n// - ordering of literals in premises and conclusions\n// if changedClauseId is null, update all nodes in the dag\n// if changedClauseId is the id of a clause, update the node and all children of the node\n// Precondition: computeParentLiterals was already called on the current dag\nexport function computeClauseRepresentation(dag: Dag, changedClauseId: number | null): Set<number> {\n\tassert(changedClauseId === null || dag.nodes.has(changedClauseId));\n\n\tconst changedClauses = new Set<number>();\n\tif (changedClauseId !== null) {\n\t\tchangedClauses.add(changedClauseId);\n\t}\n\n\tconst iterator = new DFPostOrderTraversal(dag);\n\twhile (iterator.hasNext()) {\n\t\tlet node = iterator.getNext();\n\n\t\tif (!node.isBoundary && node.unit.type === \"Clause\") {\n\t\t\tconst clause = node.unit as Clause;\n\n\t\t\t// compute whether clause should be updated. This is the case if\n\t\t\t// 1) all nodes should be updated (since changedClauseId === null)\n\t\t\t// 2) the node is changedClauseId\n\t\t\t// 3) a parent of node was changed\n\t\t\tlet update = changedClauseId === null || node.id === changedClauseId;\n\t\t\tif (!update) {\n\t\t\t\tfor (const parentId of node.parents) {\n\t\t\t\t\tif (changedClauses.has(parentId)) {\n\t\t\t\t\t\tupdate = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!update) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Part 1: partition literals into premise and conclusion and compute literal-representation\n\t\t\t// Hack: Vampire by default uses \"equality resolution with deletion\" as inference rule during preprocessing.\n\t\t\t//       Unfortunately the produced inference is named \"equality resolution\" and therefore clashes with\n\t\t\t//       inferences produced by the generating inference rule with the same name.\n\t\t\t//       We therefore check that inferences with name \"equality resolution\" are not \"equality resolution with deletion\"-inferences.\n\t\t\tconst isEqualityResolutionWithDeletion = node.inferenceRule === \"equality resolution\" && dag.get(node.parents[0]).isFromPreprocessing === true;\n\t\t\tconst propagateSingleParent = node.inferenceRule === \"subsumption resolution\" ||\n\t\t\t\t(node.inferenceRule === \"equality resolution\" && !isEqualityResolutionWithDeletion) ||\n\t\t\t\tnode.inferenceRule === \"equality factoring\" ||\n\t\t\t\tnode.inferenceRule === \"forward demodulation\" ||\n\t\t\t\tnode.inferenceRule === \"backward demodulation\" ||\n\t\t\t\tnode.inferenceRule === \"forward subsumption demodulation\" ||\n\t\t\t\tnode.inferenceRule === \"factoring\" ||\n\t\t\t\tnode.inferenceRule === \"duplicate literal removal\" ||\n\t\t\t\tnode.inferenceRule === \"evaluation\" ||\n\t\t\t\tnode.inferenceRule === \"trivial inequality removal\" ||\n\t\t\t\t(node.inferenceRule === \"term algebras injectivity\" && node.parents.length == 1) ||\n\t\t\t\t(node.inferenceRule === \"term algebras distinctness\" && node.parents.length == 1);\n\t\t\tconst propagateTwoParents = node.inferenceRule === \"resolution\" ||\n\t\t\t\tnode.inferenceRule === \"superposition\";\n\n\t\t\tconst premiseLiterals = new Array<Literal>();\n\t\t\tconst conclusionLiterals = new Array<Literal>();\n\t\t\tconst contextLiterals = new Array<Literal>();\n\t\t\tfor (const literal of clause.premiseLiterals.concat(clause.conclusionLiterals, clause.contextLiterals)) {\n\n\t\t\t\tlet orientation: \"premise\" | \"conclusion\" | \"context\" | null = null;\n\n\t\t\t\tconst parentLiteral = literal.literalInParent;\n\t\t\t\tif (literal.orientationReason !== \"user\" && (propagateSingleParent || propagateTwoParents)) {\n\t\t\t\t\tassert(parentLiteral !== null);\n\t\t\t\t\t// propagate orientation and representation from parent literal\n\t\t\t\t\tliteral.representation = parentLiteral!.representation;\n\t\t\t\t\tif (propagateSingleParent) {\n\t\t\t\t\t\tassert(node.parents.length > 0);\n\t\t\t\t\t\tconst hasSwitchedParents = node.inferenceRule === \"backward demodulation\"\n\t\t\t\t\t\tconst parent = dag.get(node.parents[hasSwitchedParents ? 1 : 0]);\n\n\t\t\t\t\t\tif (parent.unit.type === \"Clause\") {\n\t\t\t\t\t\t\tconst parentClause = parent.unit as Clause;\n\t\t\t\t\t\t\t// figure out whether parentLiteral occurs in premise or conclusion and set orientation accordingly\n\t\t\t\t\t\t\tif (parentClause.premiseLiterals.find(l => l === parentLiteral)) {\n\t\t\t\t\t\t\t\torientation = \"premise\";\n\t\t\t\t\t\t\t} else if (parentClause.conclusionLiterals.find(l => l === parentLiteral)) {\n\t\t\t\t\t\t\t\torientation = \"conclusion\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tassert(parentClause.contextLiterals.find(l => l === parentLiteral));\n\t\t\t\t\t\t\t\torientation = \"context\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (propagateTwoParents) {\n\t\t\t\t\t\tassert(node.parents.length == 2);\n\t\t\t\t\t\tconst leftNode = dag.get(node.parents[0]);\n\t\t\t\t\t\tconst rightNode = dag.get(node.parents[1]);\n\t\t\t\t\t\tif (leftNode.unit.type === \"Clause\" && rightNode.unit.type === \"Clause\") {\n\t\t\t\t\t\t\tconst leftClause = leftNode.unit as Clause;\n\t\t\t\t\t\t\tconst rightClause = rightNode.unit as Clause;\n\t\t\t\t\t\t\t// figure out whether parentLiteral occurs in premise or conclusion of left or right premise and set orientation accordingly\n\t\t\t\t\t\t\tif (leftClause.premiseLiterals.find(l => l === parentLiteral)) {\n\t\t\t\t\t\t\t\torientation = \"premise\";\n\t\t\t\t\t\t\t} else if (leftClause.conclusionLiterals.find(l => l === parentLiteral)) {\n\t\t\t\t\t\t\t\torientation = \"conclusion\";\n\t\t\t\t\t\t\t} else if (leftClause.contextLiterals.find(l => l === parentLiteral)) {\n\t\t\t\t\t\t\t\torientation = \"context\";\n\t\t\t\t\t\t\t} else if (rightClause.premiseLiterals.find(l => l === parentLiteral)) {\n\t\t\t\t\t\t\t\torientation = \"premise\";\n\t\t\t\t\t\t\t} else if (rightClause.conclusionLiterals.find(l => l === parentLiteral)) {\n\t\t\t\t\t\t\t\torientation = \"conclusion\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tassert(rightClause.contextLiterals.find(l => l === parentLiteral));\n\t\t\t\t\t\t\t\torientation = \"context\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tliteral.orientationReason = \"inherited\"\n\t\t\t\t}\n\n\t\t\t\t// otherwise decide whether current orientation should be kept or whether it should be computed using a heuristic\n\t\t\t\telse if (literal.orientationReason !== \"none\" ) {\n\t\t\t\t\tif (clause.premiseLiterals.find(l => l === literal)) {\n\t\t\t\t\t\torientation = \"premise\";\n\t\t\t\t\t} else if (clause.conclusionLiterals.find(l => l === literal)) {\n\t\t\t\t\t\torientation = \"conclusion\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert(clause.contextLiterals.find(l => l === literal))\n\t\t\t\t\t\torientation = \"context\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// use heuristic to compute orientation\n\t\t\t\t\tif (literal.negated && literal.name !== \"=\") {\n\t\t\t\t\t\torientation = \"premise\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\torientation = \"conclusion\";\n\t\t\t\t\t}\n\t\t\t\t\tliteral.orientationReason = \"heuristic\";\n\t\t\t\t}\n\n\t\t\t\tif (orientation === \"premise\") {\n\t\t\t\t\tpremiseLiterals.push(literal);\n\t\t\t\t} else if (orientation === \"conclusion\") {\n\t\t\t\t\tconclusionLiterals.push(literal);\n\t\t\t\t} else {\n\t\t\t\t\tassert(orientation === \"context\");\n\t\t\t\t\tcontextLiterals.push(literal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Part 2: order literals according to the order of literals in the parents\n\t\t\t// only sort if no manually oriented literal in clause\n\t\t\tlet existsUserOrientedLiteral = false;\n\t\t\tfor (const literal of clause.premiseLiterals.concat(clause.conclusionLiterals, clause.contextLiterals)) {\n\t\t\t\tif (literal.orientationReason === \"user\") {\n\t\t\t\t\texistsUserOrientedLiteral = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!existsUserOrientedLiteral && propagateSingleParent) {\n\t\t\t\tconst hasSwitchedParents = node.inferenceRule === \"backward demodulation\"\n\t\t\t\tconst parent = dag.get(node.parents[hasSwitchedParents ? 1 : 0]);\n\t\t\t\t\n\t\t\t\tif (parent.unit.type === \"Clause\") {\n\t\t\t\t\tconst parentClause = parent.unit as Clause;\n\n\t\t\t\t\t// generate map parentLiteral -> indexInPremise\n\t\t\t\t\tconst premiseIndexMap = new Map<Literal, number>();\n\t\t\t\t\tfor (let i = 0; i < parentClause.premiseLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = parentClause.premiseLiterals[i];\n\t\t\t\t\t\tpremiseIndexMap.set(parentLiteral, i);\n\t\t\t\t\t}\n\t\t\t\t\t// generate map parentLiteral -> indexInConclusion\n\t\t\t\t\tconst conclusionIndexMap = new Map<Literal, number>();\n\t\t\t\t\tfor (let i = 0; i < parentClause.conclusionLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = parentClause.conclusionLiterals[i];\n\t\t\t\t\t\tconclusionIndexMap.set(parentLiteral, i);\n\t\t\t\t\t}\n\t\t\t\t\t// generate map parentLiteral -> indexInContext\n\t\t\t\t\tconst contextIndexMap = new Map<Literal, number>();\n\t\t\t\t\tfor (let i = 0; i < parentClause.contextLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = parentClause.contextLiterals[i];\n\t\t\t\t\t\tcontextIndexMap.set(parentLiteral, i);\n\t\t\t\t\t}\n\t\t\t\t\t// sort premise, conclusion and context\n\t\t\t\t\tpremiseLiterals.sort((lit1: Literal, lit2: Literal) => {\n\t\t\t\t\t\tassert(lit1.literalInParent !== null);\n\t\t\t\t\t\tassert(lit2.literalInParent !== null);\n\t\t\t\t\t\tconst index1 = premiseIndexMap.get(lit1.literalInParent!);\n\t\t\t\t\t\tconst index2 = premiseIndexMap.get(lit2.literalInParent!);\n\t\t\t\t\t\tassert(index1 !== undefined);\n\t\t\t\t\t\tassert(index2 !== undefined);\n\t\t\t\t\t\treturn index1! - index2!;\n\t\t\t\t\t});\n\t\t\t\t\tconclusionLiterals.sort((lit1: Literal, lit2: Literal) => {\n\t\t\t\t\t\tassert(lit1.literalInParent !== null);\n\t\t\t\t\t\tassert(lit2.literalInParent !== null);\n\t\t\t\t\t\tconst index1 = conclusionIndexMap.get(lit1.literalInParent!);\n\t\t\t\t\t\tconst index2 = conclusionIndexMap.get(lit2.literalInParent!);\n\t\t\t\t\t\tassert(index1 !== undefined);\n\t\t\t\t\t\tassert(index2 !== undefined);\n\t\t\t\t\t\treturn index1! - index2!;\n\t\t\t\t\t});\n\t\t\t\t\tcontextLiterals.sort((lit1: Literal, lit2: Literal) => {\n\t\t\t\t\t\tassert(lit1.literalInParent !== null);\n\t\t\t\t\t\tassert(lit2.literalInParent !== null);\n\t\t\t\t\t\tconst index1 = contextIndexMap.get(lit1.literalInParent!);\n\t\t\t\t\t\tconst index2 = contextIndexMap.get(lit2.literalInParent!);\n\t\t\t\t\t\tassert(index1 !== undefined);\n\t\t\t\t\t\tassert(index2 !== undefined);\n\t\t\t\t\t\treturn index1! - index2!;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (!existsUserOrientedLiteral && propagateTwoParents) {\n\t\t\t\tassert(node.parents.length == 2);\n\t\t\t\tconst leftNode = dag.get(node.parents[0]);\n\t\t\t\tconst rightNode = dag.get(node.parents[1]);\n\t\t\t\tif (leftNode.unit.type === \"Clause\" && rightNode.unit.type === \"Clause\") {\n\t\t\t\t\tconst leftClause = leftNode.unit as Clause;\n\t\t\t\t\tconst rightClause = rightNode.unit as Clause;\n\n\t\t\t\t\t// generate map leftLiteral/rightLiteral -> indexInPremise\n\t\t\t\t\t// ensure that rightLiterals have a higher index than leftLiterals\n\t\t\t\t\tconst premiseIndexMap = new Map<Literal, number>();\n\t\t\t\t\tfor (let i = 0; i < leftClause.premiseLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = leftClause.premiseLiterals[i];\n\t\t\t\t\t\tpremiseIndexMap.set(parentLiteral, i);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0; i < rightClause.premiseLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = rightClause.premiseLiterals[i];\n\t\t\t\t\t\tpremiseIndexMap.set(parentLiteral, i + leftClause.premiseLiterals.length);\n\t\t\t\t\t}\n\t\t\t\t\t// generate map leftLiteral/rightLiteral -> indexInConclusion\n\t\t\t\t\t// ensure that rightLiterals have a higher index than leftLiterals\n\t\t\t\t\tconst conclusionIndexMap = new Map<Literal, number>();\n\t\t\t\t\tfor (let i = 0; i < leftClause.conclusionLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = leftClause.conclusionLiterals[i];\n\t\t\t\t\t\tconclusionIndexMap.set(parentLiteral, i);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0; i < rightClause.conclusionLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = rightClause.conclusionLiterals[i];\n\t\t\t\t\t\tconclusionIndexMap.set(parentLiteral, i + leftClause.conclusionLiterals.length);\n\t\t\t\t\t}\n\t\t\t\t\t// generate map leftLiteral/rightLiteral -> indexInContext\n\t\t\t\t\t// ensure that rightLiterals have a higher index than leftLiterals\n\t\t\t\t\tconst contextIndexMap = new Map<Literal, number>();\n\t\t\t\t\tfor (let i = 0; i < leftClause.contextLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = leftClause.contextLiterals[i];\n\t\t\t\t\t\tcontextIndexMap.set(parentLiteral, i);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i = 0; i < rightClause.contextLiterals.length; i++) {\n\t\t\t\t\t\tconst parentLiteral = rightClause.contextLiterals[i];\n\t\t\t\t\t\tcontextIndexMap.set(parentLiteral, i + leftClause.contextLiterals.length);\n\t\t\t\t\t}\n\n\t\t\t\t\t// sort premise, conclusion and context\n\t\t\t\t\tpremiseLiterals.sort((lit1: Literal, lit2: Literal) => {\n\t\t\t\t\t\tassert(lit1.literalInParent !== null);\n\t\t\t\t\t\tassert(lit2.literalInParent !== null);\n\t\t\t\t\t\tconst index1 = premiseIndexMap.get(lit1.literalInParent!);\n\t\t\t\t\t\tconst index2 = premiseIndexMap.get(lit2.literalInParent!);\n\t\t\t\t\t\tassert(index1 !== undefined);\n\t\t\t\t\t\tassert(index2 !== undefined);\n\t\t\t\t\t\treturn index1! - index2!;\n\t\t\t\t\t});\n\t\t\t\t\tconclusionLiterals.sort((lit1: Literal, lit2: Literal) => {\n\t\t\t\t\t\tassert(lit1.literalInParent !== null);\n\t\t\t\t\t\tassert(lit2.literalInParent !== null);\n\t\t\t\t\t\tconst index1 = conclusionIndexMap.get(lit1.literalInParent!);\n\t\t\t\t\t\tconst index2 = conclusionIndexMap.get(lit2.literalInParent!);\n\t\t\t\t\t\tassert(index1 !== undefined);\n\t\t\t\t\t\tassert(index2 !== undefined);\n\t\t\t\t\t\treturn index1! - index2!;\n\t\t\t\t\t});\n\t\t\t\t\tcontextLiterals.sort((lit1: Literal, lit2: Literal) => {\n\t\t\t\t\t\tassert(lit1.literalInParent !== null);\n\t\t\t\t\t\tassert(lit2.literalInParent !== null);\n\t\t\t\t\t\tconst index1 = contextIndexMap.get(lit1.literalInParent!);\n\t\t\t\t\t\tconst index2 = contextIndexMap.get(lit2.literalInParent!);\n\t\t\t\t\t\tassert(index1 !== undefined);\n\t\t\t\t\t\tassert(index2 !== undefined);\n\t\t\t\t\t\treturn index1! - index2!;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Part 3: update literals\n\t\t\tclause.premiseLiterals = premiseLiterals;\n\t\t\tclause.conclusionLiterals = conclusionLiterals;\n\t\t\tclause.contextLiterals = contextLiterals;\n\n\t\t\t// Part 4: mark clause to be changed\n\t\t\tchangedClauses.add(node.id);\n\t\t}\n\t}\n\n\treturn changedClauses;\n}\n\n\n\n\n\n","import * as React from 'react';\nimport {Component} from 'react';\n\nimport Main from './Main';\nimport Aside from './Aside';\nimport { Dag, ParsedLine } from '../model/dag';\nimport SatNode from '../model/sat-node';\nimport './App.css';\nimport { assert } from '../model/util';\nimport { filterNonParents, filterNonConsequences, mergePreprocessing } from '../model/transformations';\nimport { findCommonConsequences } from '../model/find-node';\nimport { VizWrapper } from '../model/viz-wrapper';\nimport { Clause } from '../model/unit';\nimport { Literal } from '../model/literal';\nimport { computeClauseRepresentation, computeParentLiterals } from '../model/clause-orientation';\n\ntype Props = {\n  problem: string,\n  vampireUserOptions: string,\n  mode: \"proof\" | \"saturation\" | \"manualcs\",\n  hideBracketsAssoc: boolean,\n  nonStrictForNegatedStrictInequalities: boolean, \n  orientClauses: boolean,\n  logging: boolean\n};\n\n/* Invariant: the state is always in one of the following phases\n *    \"loaded\": A dag is loaded. Clause selection is not possible. dags, nodeSelection and currentTime hold meaningful values.\n *    \"loaded selected\": Same as \"loaded\", but clause selection is possible.\n *    \"waiting\": Waiting for answer from Vampire server. message holds a meaningful value.\n *    \"layouting\": Layouting a dag. message holds a meaningful value.\n *    \"error\": Some error occured. message holds a meaningful value.\n */\ntype State = {\n  state: \"loaded\" | \"loaded select\" | \"waiting\" | \"layouting\" | \"error\",\n  dags: Dag[],\n  nodeSelection: number[],\n  currentTime: number,\n  animateDagChanges,\n  changedNodesEvent?: Set<number>, // update to trigger refresh of node in graph. Event is of the form [eventId, nodeId]\n  message: string,\n  showPassiveDag: boolean\n  nodeIdToActivate: number | null,\n  infoToggle: boolean,\n  editToggle: boolean\n}\n\nclass App extends Component<Props, State> {\n\n  state: State = {\n    state: \"waiting\",\n    dags: [],\n    nodeSelection: [],\n    currentTime: 0,\n    animateDagChanges: false,\n    changedNodesEvent: undefined,\n    message: \"\",\n    showPassiveDag: false,\n    nodeIdToActivate: null,\n    infoToggle: false,\n    editToggle: false,\n  };\n\n  render() {\n    const {\n      state,\n      dags,\n      nodeSelection,\n      currentTime,\n      animateDagChanges,\n      changedNodesEvent,\n      message,\n      showPassiveDag\n    } = this.state;\n    \n    let dag;\n    let main;\n    if (state === \"loaded\" || state === \"loaded select\") {\n      assert(dags.length > 0);\n      dag = dags[dags.length-1];\n      main = (\n        <Main\n          dag={dag}\n          showPassiveDag={showPassiveDag}\n          nodeSelection={nodeSelection}\n          changedNodesEvent={changedNodesEvent}\n          historyLength={dags[0].maximalActiveTime()}\n          currentTime={currentTime}\n          animateDagChanges={animateDagChanges}\n          infoToggle={this.state.infoToggle}\n          editToggle={this.state.editToggle}\n          onNodeSelectionChange={this.updateNodeSelection.bind(this)}\n          onCurrentTimeChange={this.updateCurrentTime.bind(this)}\n          onDismissPassiveDag={this.dismissPassiveDag.bind(this)}\n          onUpdateNodePositions={this.updateNodePositions.bind(this)}\n          onLiteralOrientationChange={this.changeLiteralOrientation.bind(this)}\n          onLiteralRepresentationChange={this.changeLiteralRepresentation.bind(this)}\n          onToggleInfo={this.toggleInfo.bind(this)}\n          onToggleEdit={this.toggleEdit.bind(this)}\n        />\n      );\n    } else {\n      dag = null;\n      main = (\n        <main>\n          <section className=\"graph-placeholder\">{message}</section>\n          <section className=\"slider-placeholder\"/>\n        </main>\n      );\n    }\n\n    return (\n      <div className=\"app\">\n        {main}\n        <Aside\n          dag={dag}\n          currentTime={currentTime}\n          nodeSelection={nodeSelection}\n          multipleVersions={dags.length > 1}\n          infoToggle={this.state.infoToggle}\n          editToggle={this.state.editToggle}\n          onUpdateNodeSelection={this.updateNodeSelection.bind(this)}\n          onUndo={this.undoLastStep.bind(this)}\n          onRenderParentsOnly={this.renderParentsOnly.bind(this)}\n          onRenderChildrenOnly={this.renderChildrenOnly.bind(this)}\n          onShowPassiveDag={this.showPassiveDag.bind(this)}\n          onSelectParents={this.selectParents.bind(this)}\n          onSelectChildren={this.selectChildren.bind(this)}\n          onSelectCommonConsequences={this.selectCommonConsequences.bind(this)}\n          onLiteralOrientationChange={this.changeLiteralOrientation.bind(this)}\n          onLiteralRepresentationChange={this.changeLiteralRepresentation.bind(this)}\n          onToggleInfo={this.toggleInfo.bind(this)}\n          onToggleEdit={this.toggleEdit.bind(this)}\n        />\n      </div>\n    );\n\n  }\n\n  async componentDidMount() {\n\n    // call Vampire on given input problem\n    await this.runVampire(this.props.problem, this.props.vampireUserOptions, this.props.mode);\n\n    if (this.state.state === \"loaded select\" && this.props.mode === \"manualcs\") {\n      this.selectFinalPreprocessingClauses();\n    }\n  }\n\n\n  // NETWORK ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  updateNodeSelection(nodeSelection: number[]) {\n    if (this.props.logging) {\n      console.log(`Updating node selection to [${nodeSelection.toString()}]`);\n    }\n    this.setState({nodeSelection: nodeSelection});\n  }\n\n  updateCurrentTime(currentTime: number) {\n    if (this.props.logging) {\n      console.log(`Updating current time to ${currentTime}`);\n    }\n    const dags = this.state.dags\n    assert(dags.length > 0);\n    const dag = dags[dags.length - 1];\n\n    const nodesInActiveDag = dag.computeNodesInActiveDag(currentTime);\n    const nodeSelection = new Array<number>();\n    for (const nodeId of this.state.nodeSelection) {\n      if (nodesInActiveDag.has(nodeId)) {\n        nodeSelection.push(nodeId);\n      }\n    }\n    this.setState({\n      nodeSelection: nodeSelection,\n      currentTime: currentTime\n    });\n  }\n\n\n  // FILE UPLOAD ///////////////////////////////////////////////////////////////////////////////////////////////////////\n  jsonToParsedLines(json: any): Array<ParsedLine> {\n    const parsedLines = new Array<ParsedLine>();\n    for (const line of json.lines) {\n      const statistics = new Map<string,number>();\n      for (const key in line.statistics) {\n        const val = line.statistics[key];\n        if (typeof val === \"number\"){\n          statistics.set(key, val);\n        }\n      }\n      parsedLines.push(new ParsedLine(line.lineType, line.unitId, line.unitString, line.inferenceRule, line.parents, statistics));\n    }\n    return parsedLines;\n  }\n\n  async runVampire(problem: string, vampireUserOptions: string, mode: \"proof\" | \"saturation\" | \"manualcs\") {\n    this.setState({\n      state: \"waiting\",\n      message: \"Waiting for Vampire...\",\n      dags: [],\n      nodeSelection: [],\n      currentTime: 0\n    });\n\n    const url = mode === \"manualcs\" ? 'http://localhost:5000/vampire/startmanualcs' : 'http://localhost:5000/vampire/start';\n    if (this.props.logging) {\n      console.log(`Starting request to url '${url}' with Vampire-user-options '${vampireUserOptions}'.`);\n    }\n    const fetchedJSON = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        file: problem, \n        vampireUserOptions: vampireUserOptions\n      })\n    });\n\n    try {\n      const json = await fetchedJSON.json();\n\n      if (this.props.logging) {\n        console.log(`Received response from Vampire server.`);\n      }\n      if (json.status === \"success\") {\n        assert(json.vampireState === \"running\" ||\n          json.vampireState === \"refutation\" ||\n          json.vampireState === \"saturation\" ||\n          json.vampireState === \"timeout\");\n\n        if (mode === \"proof\") {\n          assert(json.vampireState !== \"running\")\n          if (json.vampireState === \"saturation\") {\n            this.setState({\n              state: \"error\",\n              message: \"Saturation: Vampire saturated, so there exists no proof!\",\n              dags: [],\n              nodeSelection: [],\n              currentTime: 0\n            });\n            return;\n          }\n          if (json.vampireState === \"timeout\") {\n            this.setState({\n              state: \"error\",\n              message: \"Timeout: Vampire could not find a proof in the given time!\",\n              dags: [],\n              nodeSelection: [],\n              currentTime: 0\n            });\n            return;\n          }\n        } else {\n          if (json.vampireState === \"saturation\" && json.lines.length === 0) {\n            this.setState({\n              state: \"error\",\n              message: \"The example was already identified to be satisfiable during Vampire's preprocessing.\",\n              dags: [],\n              nodeSelection: [],\n              currentTime: 0\n            });\n            return;\n          }\n        }\n        if (this.props.logging) {\n          console.log(`Constructing Vampire-saturation-events from received JSON.`);\n        }\n        const parsedLines = this.jsonToParsedLines(json);\n\n        if (this.props.logging) {\n          console.log(`Constructing saturation graph from Vampire-saturation-events.`);\n        }\n        let dag = Dag.fromParsedLines(parsedLines, null);\n\n        if (this.props.logging) {\n          console.log(`Merging preprocessing-subgraph of saturation graph.`);\n        }\n        dag = mergePreprocessing(dag);\n\n        if (mode === \"proof\") {\n          assert(dag.isRefutation);\n          // find empty clause\n          for (const node of dag.nodes.values()) {\n            if (node.unit.type === \"Clause\") {\n              const clause = node.unit as Clause;\n              if (clause.premiseLiterals.length === 0 && clause.conclusionLiterals.length === 0) {\n\n                // filter all non-parents of empty clause\n                const relevantIds = new Set<number>();\n                relevantIds.add(node.id);\n                dag = filterNonParents(dag, relevantIds);\n                break;\n              }\n            }\n          }\n        }\n        if (this.props.logging) {\n          console.log(`Computing layout for saturation graph.`);\n        }\n        await VizWrapper.layoutDag(dag, true);\n\n        if (this.props.orientClauses) {\n          if (this.props.logging) {\n            console.log(`Computing literal flows for saturation graph.`);\n          }\n          computeParentLiterals(dag);\n          if (this.props.logging) {\n            console.log(`Computing clause representations for saturation graph.`);\n          }\n          computeClauseRepresentation(dag, null);\n        }\n        this.setLiteralOptions(dag);\n\n        const state = (mode == \"manualcs\" && json.vampireState === \"running\") ? \"loaded select\" : \"loaded\";\n\n        this.setState({\n          state: state,\n          dags: [dag],\n          nodeSelection: [],\n          currentTime: dag.maximalActiveTime(),\n          animateDagChanges: false\n        });\n        if (this.props.logging) {\n          console.log(`Finished preparation of saturation graph.`);\n        }\n      } else {\n        assert(json.status === \"error\");\n        const errorMessage = json.message;\n        assert(errorMessage !== undefined && errorMessage !== null);\n        this.setState({\n          state: \"error\",\n          message: errorMessage,\n          dags: [],\n          nodeSelection: [],\n          currentTime: 0\n        });\n      }\n    } catch (error) {\n      if (error.name === \"SatVisAssertionError\") {\n        throw error;\n      }\n      this.setState({\n        state: \"error\",\n        message: `Error: ${error[\"message\"]}`,\n        dags: [],\n        nodeSelection: [],\n        currentTime: 0\n      });\n    }\n  }\n\n  // select the clause with id 'selectedId', then compute incremental layout for resulting dag\n  async selectClause(selectedId: number, positioningHint: [number, number]) {\n    assert(this.state.dags.length >= 1);\n    const currentDag = this.state.dags[this.state.dags.length-1];\n    const currentDagActiveNodes = currentDag.computeNodesInActiveDag(currentDag.maximalActiveTime()); // needs to be computed before dag is extended, since nodes are shared\n    assert(currentDag.mergeMap !== null);\n\n    // ask server to select clause and await resulting saturation events\n    const url = 'http://localhost:5000/vampire/select';\n    if (this.props.logging) {\n      console.log(`Starting request to url '${url}' with selected-id '${selectedId}'.`);\n    }\n    const fetchedJSON = await fetch(url, {\n      method: 'POST',\n      mode: 'cors',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({id: selectedId})\n    });\n\n    try {\n      const json = await fetchedJSON.json();\n      if (this.props.logging) {\n        console.log(`Received response from Vampire server.`);\n      }\n      if (json.status === \"success\") {\n        if (this.props.logging) {\n          console.log(`Constructing Vampire-saturation-events from received JSON.`);\n        }\n        const parsedLines = this.jsonToParsedLines(json);\n\n        // extend existing dag with new saturation events from server\n        if (this.props.logging) {\n          console.log(`Extending existing saturation graph with Vampire-saturation-events.`);\n        }\n        const newDag = Dag.fromParsedLines(parsedLines, currentDag);\n\n        // compute which nodes have been newly generated\n        const newDagActiveNodes = newDag.computeNodesInActiveDag(newDag.maximalActiveTime());\n        const newNodes = new Map<number, SatNode>();\n        for (const [nodeId, node] of newDag.nodes) {\n          if(!currentDagActiveNodes.has(nodeId) && newDagActiveNodes.has(nodeId)) {\n            newNodes.set(nodeId, node);\n          }\n        }\n\n        if (newNodes.size > 0) {\n          if (this.props.logging) {\n            console.log(`Extending layout to new nodes of saturation graph.`);\n          }\n          await VizWrapper.layoutNodesAtPosition(newNodes, positioningHint);\n        }\n\n        if (this.props.orientClauses) {\n          if (this.props.logging) {\n            console.log(`Updating literal flows for saturation graph.`);\n          }\n          computeParentLiterals(newDag);\n          if (this.props.logging) {\n            console.log(`Updating clause representations for saturation graph.`);\n          }\n          computeClauseRepresentation(newDag, null);\n        }\n        this.setLiteralOptions(newDag);\n  \n        const state = json.vampireState === \"running\" ? \"loaded select\" : \"loaded\";\n        const nodeSelection = new Array<number>();\n        for (const nodeId of newNodes.keys()) {\n          nodeSelection.push(nodeId);\n        }\n        this.setState({\n          state: state,\n          dags: [newDag],\n          nodeSelection: nodeSelection,\n          currentTime: newDag.maximalActiveTime(),\n          animateDagChanges: true\n        });\n        if (this.props.logging) {\n          console.log(`Finished extension of saturation graph.`);\n        }\n      } else {\n        assert(json.status === \"error\");\n        const errorMessage = json.message;\n        assert(errorMessage !== undefined && errorMessage !== null);\n        this.setState({\n          state: \"error\",\n          message: errorMessage,\n          dags: [],\n          nodeSelection: [],\n          currentTime: 0\n        });\n      }\n    } catch (error) {\n      if (error.name === \"SatVisAssertionError\") {\n        throw error;\n      }\n      this.setState({\n        state: \"error\",\n        message: `Error: ${error[\"message\"]}`,\n        dags: [],\n        nodeSelection: [],\n        currentTime: 0\n      });\n    }\n  }\n\n  async selectFinalPreprocessingClauses() {\n    if (this.props.logging) {\n      console.log(`Starting to select all clauses from preprocessing.`);\n    }\n    // iterate as long as the server waits for clause selections and as long as a suitable clause is found\n    let stop = false;\n    while (this.state.state === \"loaded select\" && !stop) {\n      const dag = this.state.dags[0];\n\n      // find a final preprocessing clause which can be selected\n      stop = true;\n      for (const [nodeId, node] of dag.nodes) {\n        if (node.isFromPreprocessing && node.newTime !== null) {\n          if (node.activeTime === null && node.deletionTime === null) {\n            // select that clause\n            assert(node.position !== null);\n            await this.selectClause(nodeId, node.position as [number, number]);\n            stop = false;\n            break;\n          }\n        }\n      }\n    }\n    if (this.props.logging) {\n      console.log(`Finished to select all clauses from preprocessing.`);\n    }\n  }\n\n  // SUBGRAPH SELECTION ////////////////////////////////////////////////////////////////////////////////////////////////\n\n  undoLastStep() {\n    if (this.props.logging) {\n      console.log(`Pop last saturation graph from the stack.`);\n    }\n    this.popDag();\n  }\n\n  async renderParentsOnly() {\n    const {dags, nodeSelection} = this.state;\n    const currentDag = dags[dags.length - 1];\n\n    if (this.props.logging) {\n      console.log(`Generate saturation graph which consists only of the (transitive) parents of clauses [${nodeSelection}].`);\n    }\n    const newDag = filterNonParents(currentDag, new Set(nodeSelection));\n    if (this.props.logging) {\n      console.log(`Computing layout for new saturation graph.`);\n    }\n    await VizWrapper.layoutDag(newDag, true);\n\n    if (this.props.logging) {\n      console.log(`Finished preparation of new saturation graph. Pushing it to the stack.`);\n    }\n    this.pushDag(newDag);\n  }\n\n  async renderChildrenOnly() {\n    const {dags, nodeSelection} = this.state;\n    const currentDag = dags[dags.length - 1];\n\n    if (this.props.logging) {\n      console.log(`Generate saturation graph which consists only of the (transitive) children of clauses [${nodeSelection}].`);\n    }\n    const newDag = filterNonConsequences(currentDag, new Set(nodeSelection));\n    if (this.props.logging) {\n      console.log(`Computing layout for new saturation graph.`);\n    }\n    await VizWrapper.layoutDag(newDag, true);\n\n    if (this.props.logging) {\n      console.log(`Finished preparation of new saturation graph. Pushing it to the stack.`);\n    }\n    this.pushDag(newDag);\n  }\n\n  // PASSIVE DAG ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  async showPassiveDag() {\n    assert(this.state.showPassiveDag === false);\n    assert(this.state.nodeSelection.length > 0);\n\n    if (this.props.logging) {\n      console.log(`Display selection graph containing all clauses which can be selected for activation and whose derivation contains all the clauses [${this.state.nodeSelection}].`);\n    }\n    this.setState({showPassiveDag: true});\n  }\n\n  async dismissPassiveDag(selectedId: number | null, positioningHint: [number, number] | null) {\n    assert((selectedId === null) === (positioningHint === null));\n    assert(this.state.showPassiveDag === true);\n\n    // remove passive dag\n    this.setState({ showPassiveDag: false});\n\n    if (selectedId !== null) {\n      // switch from currentDag to dag resulting from selecting nodeIdToActivate\n      if (this.props.logging) {\n        console.log(`Removing selection graph. Clause ${selectedId} was selected.`);\n      }\n      await this.selectClause(selectedId, positioningHint!);\n    } else {\n      if (this.props.logging) {\n        console.log(`Removing selection graph. No clause was selected.`);\n      }\n    }\n  }\n\n\n  // NODE SELECTION ////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  selectParents() {\n    const {dags, nodeSelection, currentTime} = this.state;\n    const currentDag = dags[dags.length - 1];\n    const nodesInActiveDag = currentDag.computeNodesInActiveDag(currentTime);\n\n    const newSelection = new Set(nodeSelection);\n    for (const nodeId of nodeSelection) {\n      assert(nodesInActiveDag.has(nodeId));\n      for (const parentId of currentDag.get(nodeId).parents) {\n        if(nodesInActiveDag.has(parentId)) {\n          newSelection.add(parentId);\n        }\n      }\n    }\n\n    this.updateNodeSelection(Array.from(newSelection));\n  }\n\n  selectChildren() {\n    const {dags, nodeSelection, currentTime} = this.state;\n    const currentDag = dags[dags.length - 1];\n    const nodesInActiveDag = currentDag.computeNodesInActiveDag(currentTime);\n\n    const newSelection = new Set(nodeSelection);\n    for (const nodeId of nodeSelection) {\n      assert(nodesInActiveDag.has(nodeId));\n      for (const childId of currentDag.getChildren(nodeId)) {\n        if(nodesInActiveDag.has(childId)) {\n          newSelection.add(childId);\n        }\n      }\n    }\n    this.updateNodeSelection(Array.from(newSelection));\n  }\n\n  selectCommonConsequences() {\n    const {dags, nodeSelection, currentTime} = this.state;\n    const currentDag = dags[dags.length - 1];\n    const nodesInActiveDag = currentDag.computeNodesInActiveDag(currentTime);\n\n    const commonConsequences = findCommonConsequences(currentDag, new Set(nodeSelection));\n    const newSelection = new Array<number>();\n    for (const nodeId of commonConsequences) {\n      if (nodesInActiveDag.has(nodeId)) {\n        newSelection.push(nodeId);\n      }\n    }\n    this.updateNodeSelection(newSelection);\n  }\n\n  // LITERALS ////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  private changeLiteralOrientation(nodeId: number, oldPosition: [\"premise\" | \"conclusion\" | \"context\", number], newPosition: [\"premise\" | \"conclusion\" | \"context\", number]) {\n    const dags = this.state.dags;\n    assert(dags.length > 0);\n    const dag = dags[0];\n    const currentDag = dags[dags.length - 1];\n    const node = dag.nodes.get(nodeId);\n    assert(node !== undefined);\n    assert(node!.unit.type === \"Clause\");\n    const clause = node!.unit as Clause;\n\n    clause.changeLiteralOrientation(oldPosition, newPosition);\n\n    const changedNodes = computeClauseRepresentation(dag, nodeId);\n    \n    this.setState({changedNodesEvent: changedNodes});\n  }\n\n  private changeLiteralRepresentation(nodeId: number, literal: Literal) {\n    const dags = this.state.dags;\n    assert(dags.length > 0);\n    const dag = dags[0];\n    const node = dag.nodes.get(nodeId);\n    assert(node !== undefined);\n\n    literal.switchToNextRepresentation();\n    \n    const changedNodes = computeClauseRepresentation(dag, nodeId);\n\n    this.setState({changedNodesEvent: changedNodes});\n  }\n\n  // HELPERS ///////////////////////////////////////////////////////////////////////////////////////////////////////////\n  \n  updateNodePositions(nodeIds: Array<number>, delta: [number, number]) {\n    const dags = this.state.dags\n    assert(this.state.dags.length > 0);\n    const dag = dags[dags.length - 1];\n    for (const nodeId of nodeIds) {\n      const node = dag.get(nodeId);\n      assert(node.position !== null);\n      node.position = [node.position![0] + delta[0], node.position![1] + delta[1]];\n    }\n  }\n\n  // push a new dag on the stack of dags\n  // Precondition: the layout for newDag has already been computed\n  private pushDag(newDag: Dag) {\n    assert(!newDag.isPassiveDag);\n\n    const {dags, nodeSelection} = this.state;\n    \n    // filter out selected nodes which don't occur in new graph\n    const selectedNodesInNewDag = new Array<number>();\n    for (const nodeId of nodeSelection) {\n      if (newDag.nodes.has(nodeId)) {\n        selectedNodesInNewDag.push(nodeId);\n      }\n    }\n\n    this.setState({\n      dags: dags.concat([newDag]),\n      nodeSelection: selectedNodesInNewDag,\n      animateDagChanges: false\n    });\n  }\n\n  private popDag() {\n    assert(this.state.dags.length > 1, \"Undo last step must only be called if there exist at least two dags\");\n\n    this.setState((state, props) => ({\n      dags: state.dags.slice(0, state.dags.length-1),\n      animateDagChanges: false\n    }));\n  }\n\n  setLiteralOptions(dag: Dag) {\n    const hideBracketsAssoc = this.props.hideBracketsAssoc;\n    const nonStrictForNegatedStrictInequalities = this.props.nonStrictForNegatedStrictInequalities;\n\n    for (const node of dag.nodes.values()) {\n      if (node.unit.type === \"Clause\") {\n        const clause = node.unit as Clause;\n        for (const literal of clause.premiseLiterals) {\n          literal.hideBracketsAssoc = hideBracketsAssoc;\n          literal.nonStrictForNegatedStrictInequalities = nonStrictForNegatedStrictInequalities;\n        }\n        for (const literal of clause.conclusionLiterals) {\n          literal.hideBracketsAssoc = hideBracketsAssoc;\n          literal.nonStrictForNegatedStrictInequalities = nonStrictForNegatedStrictInequalities;\n        }\n      }\n    }\n  }\n\n  // STATE TOGGLE //////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  toggleInfo() {\n    this.setState({ infoToggle: !this.state.infoToggle });\n  }\n\n  toggleEdit() {\n    this.setState({ editToggle: !this.state.editToggle });\n  }\n}\n\nexport default App;\n","import { Dag } from \"./dag\";\nimport { DFPostOrderTraversal } from \"./traversal\";\n\n// return ids of nodes, which have a derivation where each of the nodes in relevantIds occurs\nexport function findCommonConsequences(dag: Dag, relevantIds: Set<number>): Array<number> {\n\n\t// want to compute common consequences\n\tconst commonConsequences = new Array<number>();\n\n\t// create dictionary which maps the id of each node to the subset of relevantIds occuring in the derivation of the node\n\tconst idToRelevantParentIds = new Map<number, Set<number>>();\n\n\t// add all transitive children of ids in transitiveChildren to transitiveChildren\n\tconst iterator = new DFPostOrderTraversal(dag);\n\twhile (iterator.hasNext()) {\n\t\tconst currentNode = iterator.getNext();\n\t\tconst currentNodeId = currentNode.id;\n\n\t\tconst relevantParents = new Set<number>();\n\t\t// compute relevant parents and update dictionary\n\t\tif (relevantIds.has(currentNodeId)) {\n\t\t\trelevantParents.add(currentNodeId);\n\t\t}\n\t\tfor (const parentId of currentNode.parents) {\n\t\t\tconst relevantParentIdsFromParent = idToRelevantParentIds.get(parentId) as Set<number>;\n\t\t\t// merge relevantParentIdsFromParent into relevantParents\n\t\t\tfor (const relevantParentId of relevantParentIdsFromParent) {\n\t\t\t\trelevantParents.add(relevantParentId);\n\t\t\t}\n\t\t}\n\t\tidToRelevantParentIds.set(currentNodeId, relevantParents);\n\n\t\t// check whether each relevant id occurs in relevant parents\n\t\tif (relevantIds.size === relevantParents.size) {\n\t\t\tcommonConsequences.push(currentNodeId);\n\t\t}\n\t}\n\t\n\treturn commonConsequences;\n}","import * as React from 'react';\nimport { NavigationBar } from \"./NavigationBar\";\nimport App from \"./App\";\nimport './AppWrapper.css';\n\ntype Props = {\n\tname: string,\n\tproblem: string,\n\tvampireUserOptions: string,\n\tmode: \"proof\" | \"saturation\" | \"manualcs\"\n\thideBracketsAssoc: boolean,\n\tnonStrictForNegatedStrictInequalities: boolean, \n\torientClauses: boolean,\n\tlogging: boolean\n  };\n  \n  export class AppWrapper extends React.Component<Props, {}> {\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"appWrapper\">\n\t\t\t\t<NavigationBar \n\t\t\t\t\tname={this.props.name}\n\t\t\t\t/>\n\t\t\t\t<App \n\t\t\t\t\tproblem={this.props.problem}\n\t\t\t\t\tvampireUserOptions={this.props.vampireUserOptions}\n\t\t\t\t\tmode={this.props.mode}\n\t\t\t\t\thideBracketsAssoc={this.props.hideBracketsAssoc}\n\t\t\t\t\tnonStrictForNegatedStrictInequalities={this.props.nonStrictForNegatedStrictInequalities}\n\t\t\t\t\torientClauses={this.props.orientClauses}\n\t\t\t\t\tlogging={this.props.logging}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n  }\n  ","import * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport './Menu.css';\nimport * as Monaco from 'monaco-editor'\nimport { assert } from '../model/util';\n\nconst icons = require('../resources/icons/all.svg') as string;\n\ntype Props = {\n  problem: string,\n  problemName: string,\n  inputSyntax: 'smtlib' | 'tptp',\n  vampireUserOptions: string,\n  hideBracketsAssoc: boolean,\n  nonStrictForNegatedStrictInequalities: boolean,\n  orientClauses: boolean,\n  logging: boolean,\n  onChangeProblem: (problem: string) => void,\n  onChangeProblemName: (problemName: string) => void,\n  onChangeInputSyntax: (syntax: 'smtlib' | 'tptp') => void\n  onChangeVampireUserOptions: (vampireUserOptions: string) => void,\n  onChangeHideBracketsAssoc: (newValue: boolean) => void,\n  onChangeNonStrictForNegatedStrictInequalities: (newValue: boolean) => void,\n  onChangeOrientClauses: (newValue: boolean) => void,\n  onChangeLogging: (newValue: boolean) => void\n}\n\nexport class Menu extends React.Component<Props, {}> {\n  private isChromeOrFirefox = navigator.userAgent.indexOf('Chrome') > -1 || navigator.userAgent.indexOf('Firefox') > -1;\n  private fileUpload = React.createRef<HTMLInputElement>();\n  monacoDiv = React.createRef<HTMLDivElement>();\n  monaco: Monaco.editor.IStandaloneCodeEditor | null = null\n\n  componentDidMount() {\n    if (!this.isChromeOrFirefox) {\n      return;\n    }\n    // generate instance of Monaco Editor\n    this.monaco = Monaco.editor.create(this.monacoDiv.current!, {\n      lineNumbers: 'off',\n      roundedSelection: false,\n      scrollBeyondLastLine: false,\n      scrollBeyondLastColumn: 0,\n      minimap: {\n        enabled: false\n      },\n      renderLineHighlight: 'none',\n      hideCursorInOverviewRuler: true,\n      links: false,\n      overviewRulerBorder: false,\n      automaticLayout: true,\n      lineDecorationsWidth: 0,\n      lineNumbersMinChars: 0,\n      wordWrap: 'wordWrapColumn'\n      // fontFamily: \"Monaco\" TODO: decide which font to use. By default, multiple fonts are loaded, which is quite slow\n    });\n    this.monaco.setValue(this.props.problem);\n    this.monaco.getModel()!.onDidChangeContent(() => {\n      this.props.onChangeProblem(this.monaco!.getModel()!.getValue());\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    assert(this.isChromeOrFirefox);\n    if (this.props.problem !== prevProps.problem) {\n      this.monaco!.setValue(this.props.problem);\n    }\n  }\n\n  render() {\n    if (!this.isChromeOrFirefox) {\n      return (\n        <section className=\"unsupported-message\">\n            <svg viewBox=\"0 0 24 24\" className=\"icon\">\n              <use xlinkHref={`${icons}#alert-triangle`}/>\n            </svg>\n            <span>Your current browser is not supported. Please use Chrome or Firefox!</span>\n        </section>\n      );\n    }\n\n    return (\n      <section className=\"component-menu\">\n        <h1>Vampire Saturation Visualization</h1>\n\n        <section className=\"editor\">\n          <div className=\"editor-spacer\">\n            <main>\n              <div className=\"headline-wrapper\">\n                <h2>Input</h2>\n                <small className=\"file-name\">{this.props.problemName}</small>\n                <button title=\"Pick a new file\" onClick={this.chooseFile.bind(this)}>\n                  <svg viewBox=\"0 0 24 24\" className=\"icon big\">\n                    <use xlinkHref={`${icons}#graph-upload`}/>\n                  </svg>\n                </button>\n              </div>\n\n              <input\n                ref={this.fileUpload}\n                type=\"file\"\n                onChange={this.uploadEncoding.bind(this)}\n              />\n              <div ref={this.monacoDiv} className=\"monaco\"></div>\n            </main>\n\n            <aside>\n              <fieldset className=\"options-card\">\n                <h3>Vampire Options</h3>\n                <ul>\n                  <li>\n                    <label htmlFor=\"inputSyntax\" className=\"form-label\">Input language</label>\n                    <select id=\"inputSyntax\" onChange={this.changeInputSyntax.bind(this)}\n                            value={this.props.inputSyntax}>\n                      <option value=\"smtlib\">SMTLIB</option>\n                      <option value=\"tptp\">TPTP</option>\n                    </select>\n                  </li>\n                  <li>\n                    <label htmlFor=\"userOptions\" className=\"form-label\">Additional Vampire options</label>\n                    <input id=\"userOptions\" type=\"text\" onChange={this.changeVampireUserOptions.bind(this)}\n                           value={this.props.vampireUserOptions}>\n                    </input>\n                  </li>\n                </ul>\n              </fieldset>\n\n              <fieldset className=\"options-card\">\n                <h3>Visualization Options</h3>\n                <ul>\n                  <li>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={this.props.hideBracketsAssoc}\n                        onChange={this.changeHideBracketsAssoc.bind(this)}/>\n                      Hide brackets for associative operators\n                    </label>\n                  </li>\n                  <li>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={this.props.nonStrictForNegatedStrictInequalities}\n                        onChange={this.changeNonStrictForNegatedStrictInequalities.bind(this)}/>\n                      Show negated strict inequalities as (positive) nonstrict inequalities\n                    </label>\n                  </li>\n                  <li>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={this.props.orientClauses}\n                        onChange={this.changeOrientClauses.bind(this)}/>\n                      Heuristically orient clauses\n                    </label>\n                  </li>\n                  <li>\n                    <label>\n                      <input\n                        type=\"checkbox\"\n                        checked={this.props.logging}\n                        onChange={this.changeLogging.bind(this)}/>\n                      Logging enabled\n                    </label>\n                  </li>\n                </ul>\n              </fieldset>\n            </aside>\n          </div>\n        </section>\n\n        <section className=\"run-menu\">\n          <Link to=\"/proof/\" className=\"fake-button\">Find proof</Link>\n          <Link to=\"/saturation/\" className=\"fake-button\">Find saturation</Link>\n          <Link to=\"/manualcs/\" className=\"fake-button\">Start manual clause selection</Link>\n        </section>\n      </section>\n    );\n  }\n\n  chooseFile() {\n    if (this.fileUpload.current) {\n      this.fileUpload.current.click();\n    }\n  }\n\n  uploadEncoding(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.files !== null && event.target.files.length > 0) {\n      const file = event.target.files[0];\n\n      const reader = new FileReader();\n      // callback which will be executed when readAsText is called\n      reader.onloadend = () => {\n        const text = (reader.result ? reader.result : '') as string;\n        this.props.onChangeProblem(text);\n        this.props.onChangeProblemName(file.name);\n\n        // guess inputSyntax from file extension:\n        if (file.name.endsWith('.smt') || file.name.endsWith('.smtlib') || file.name.endsWith('.smt2') || file.name.endsWith('.smtlib2')) {\n          this.props.onChangeInputSyntax('smtlib');\n        } else if (file.name.endsWith('.tptp')) {\n          this.props.onChangeInputSyntax('tptp');\n        }\n      };\n      reader.readAsText(file);\n    }\n  }\n\n  changeVampireUserOptions(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.value;\n    this.props.onChangeVampireUserOptions(newValue);\n  }\n\n  changeTextArea(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    const newValue = event.target.value;\n    this.props.onChangeProblem(newValue);\n  }\n\n  changeHideBracketsAssoc(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.checked;\n    this.props.onChangeHideBracketsAssoc(newValue);\n  }\n\n  changeNonStrictForNegatedStrictInequalities(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.checked;\n    this.props.onChangeNonStrictForNegatedStrictInequalities(newValue);\n  }\n\n  changeInputSyntax(event: React.ChangeEvent<HTMLSelectElement>) {\n    const newValue = event.target.value as 'smtlib' | 'tptp';\n    this.props.onChangeInputSyntax(newValue);\n  }\n\n  changeOrientClauses(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.checked;\n    this.props.onChangeOrientClauses(newValue);\n  }\n\n  changeLogging(event: React.ChangeEvent<HTMLInputElement>) {\n    const newValue = event.target.checked;\n    this.props.onChangeLogging(newValue);\n  }\n}\n","import * as React from 'react';\nimport { HashRouter as HashRouter, Route, Link } from \"react-router-dom\";\nimport { AppWrapper } from './AppWrapper'\nimport { Menu } from './Menu'\n\ntype State = {\n\tproblem: string,\n\tproblemName: string,\n\tinputSyntax: \"smtlib\" | \"tptp\",\n\tvampireUserOptions: string,\n\thideBracketsAssoc: boolean,\n\tnonStrictForNegatedStrictInequalities: boolean,\n\torientClauses: boolean,\n\tlogging: boolean\n}\n\nexport class AppRouter extends React.Component<{}, State> {\n\n\tstate: State = {\n\t\tproblem: \"\",\n\t\tproblemName: \"\",\n\t\tinputSyntax: \"smtlib\",\n\t\tvampireUserOptions: \"\",\n\t\thideBracketsAssoc: true,\n\t\tnonStrictForNegatedStrictInequalities: true,\n\t\torientClauses: true,\n\t\tlogging: false\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<HashRouter>\n\t\t\t\t<Route path=\"/\" exact render={() => \n\t\t\t\t\t<Menu \n\t\t\t\t\t\tproblem={this.state.problem}\n\t\t\t\t\t\tproblemName={this.state.problemName}\n\t\t\t\t\t\tinputSyntax={this.state.inputSyntax}\n\t\t\t\t\t\tvampireUserOptions={this.state.vampireUserOptions}\n\t\t\t\t\t\thideBracketsAssoc={this.state.hideBracketsAssoc}\n\t\t\t\t\t\tnonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n\t\t\t\t\t\torientClauses={this.state.orientClauses}\n\t\t\t\t\t\tlogging={this.state.logging}\n\t\t\t\t\t\tonChangeProblem={this.changeProblem.bind(this)}\n\t\t\t\t\t\tonChangeProblemName={this.changeProblemName.bind(this)}\n\t\t\t\t\t\tonChangeInputSyntax={this.changeInputSyntax.bind(this)}\n\t\t\t\t\t\tonChangeVampireUserOptions={this.changeVampireUserOptions.bind(this)}\n\t\t\t\t\t\tonChangeHideBracketsAssoc={this.changeHideBracketsAssoc.bind(this)}\n\t\t\t\t\t\tonChangeNonStrictForNegatedStrictInequalities={this.changeNonStrictForNegatedStrictInequalities.bind(this)}\n\t\t\t\t\t\tonChangeOrientClauses={this.changeOrientClauses.bind(this)}\n\t\t\t\t\t\tonChangeLogging={this.changeLogging.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t}/>\n\t\t\t\t<Route path=\"/proof/\" render={() => \n\t\t\t\t\tthis.appComponent(\"proof\")\n\t\t\t\t}/>\n\t\t\t\t<Route path=\"/saturation/\" render={() => \n\t\t\t\t\tthis.appComponent(\"saturation\")\n\t\t\t\t}/>\n\t\t\t\t<Route path=\"/manualcs/\" render={() => \n\t\t\t\t\tthis.appComponent(\"manualcs\")\n\t\t\t\t}/>\n\t\t\t</HashRouter>\n\t\t);\n\t}\n\n\tappComponent(mode: \"proof\" | \"saturation\" | \"manualcs\") {\n\t\tconst inputSyntax = this.state.inputSyntax === \"smtlib\" ? \"smtlib2\" : this.state.inputSyntax;\n\t\tconst vampireUserOptions = `${this.state.vampireUserOptions} --input_syntax ${inputSyntax}`;\n\n\t\treturn <AppWrapper\n\t\t\tname={this.state.problemName}\n\t\t\tmode={mode}\n\t\t\tproblem={this.state.problem!}\n\t\t\tvampireUserOptions={vampireUserOptions}\n\t\t\thideBracketsAssoc={this.state.hideBracketsAssoc}\n\t\t\tnonStrictForNegatedStrictInequalities={this.state.nonStrictForNegatedStrictInequalities}\n\t\t\torientClauses={this.state.orientClauses}\n\t\t\tlogging={this.state.logging}\n\t\t/>\n\t}\n\n\tchangeProblem(problem: string) {\n\t\tthis.setState({problem: problem});\n\t}\n\tchangeProblemName(problemName: string) {\n\t\tthis.setState({problemName: problemName});\n\t}\n\tchangeVampireUserOptions(vampireUserOptions: string) {\n\t\tthis.setState({vampireUserOptions: vampireUserOptions});\n\t}\n\tchangeHideBracketsAssoc(newValue: boolean) {\n\t\tthis.setState({hideBracketsAssoc: newValue});\n\t}\n\tchangeNonStrictForNegatedStrictInequalities(newValue: boolean) {\n\t\tthis.setState({nonStrictForNegatedStrictInequalities: newValue});\n\t}\n\tchangeInputSyntax(inputSyntax: \"smtlib\" | \"tptp\") {\n\t\tthis.setState({inputSyntax: inputSyntax});\n\t}\n\tchangeOrientClauses(newValue: boolean) {\n\t\tthis.setState({orientClauses: newValue});\n\t}\n\tchangeLogging(newValue: boolean) {\n\t\tthis.setState({logging: newValue});\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { AppRouter } from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <AppRouter/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/all.bb66e3ef.svg\";"],"sourceRoot":""}