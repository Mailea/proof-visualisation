import * as React from 'react';

import { Dag } from '../model/dag';
import Slider from './Slider';
import Graph from './Graph';
import ReactModal from 'react-modal';
ReactModal.setAppElement('#root');

type Props = {
  dag: Dag,
  passiveDag: Dag | null,
  nodeSelection: number[],
  changedNodesEvent?: Set<number>,
  historyLength: number,
  currentTime: number,
  onNodeSelectionChange: (selection: number[]) => void,
  onCurrentTimeChange: (newState: number) => void,
  onDismissPassiveDag: (performActivation: boolean) => void,
  onUpdateNodePosition: (nodeId: number, delta: [number, number]) => void
};
export default class Main extends React.Component<Props, {}> {

  // TODO: remove this, after supporting button clicks in Aside while the modal is active
  componentDidMount() {
    window.addEventListener("keyup", async (event) => {
      if (event.key === "Alt") {
        if (this.props.passiveDag !== null) {
          this.props.onDismissPassiveDag(true);
        }
      }
    },false);
  }

  render() {
    let modal;
    if (this.props.passiveDag !== null) {
      modal =
      <ReactModal
        isOpen={this.props.passiveDag !== null}
        contentLabel={`Clauses currently in Passive generated by clause with id ${this.props.passiveDag!.activeNodeId!}`}
        onRequestClose={() => {
          this.props.onDismissPassiveDag(false);
        }}
      >
        <Graph
          dag={this.props.passiveDag}
          nodeSelection={this.props.nodeSelection}
          changedNodesEvent={this.props.changedNodesEvent}
          currentTime={this.props.currentTime}
          onNodeSelectionChange={this.props.onNodeSelectionChange}
          onUpdateNodePosition={this.props.onUpdateNodePosition}
        />
      </ReactModal>  
    }

    return (
      <main>
        <Graph
          dag={this.props.dag}
          nodeSelection={this.props.nodeSelection}
          changedNodesEvent={this.props.changedNodesEvent}
          currentTime={this.props.currentTime}
          onNodeSelectionChange={this.props.onNodeSelectionChange}
          onUpdateNodePosition={this.props.onUpdateNodePosition}
        />
        {modal}
        <Slider
          historyLength={this.props.historyLength}
          currentTime={this.props.currentTime}
          onCurrentTimeChange={this.props.onCurrentTimeChange}
          enabled={!this.props.dag.isPassiveDag}
        />
      </main>
    );
  }

}
